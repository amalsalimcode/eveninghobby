# coding: utf-8

"""
    Alert History and Customer Profiles API

    The Alert History and Customer Profiles API is used to retrieve alert history information and for issuers using the VTC Alert Delivery Service to store cardholder contact information.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re
import json

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CustomerRulesAlertsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()

        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def deletemanage_alerts_preferences(self, user_identifier, manage_alerts_preferencesdelete_payload, **kwargs):
        """
        Delete Existing Notification Preferences for given Customer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletemanage_alerts_preferences(user_identifier, manage_alerts_preferencesdelete_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param ManageAlertsPreferencesdeletePayload manage_alerts_preferencesdelete_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: ManageAlertsPreferencesdeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletemanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencesdelete_payload, **kwargs)
        else:
            (data) = self.deletemanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencesdelete_payload, **kwargs)
            return data

    def deletemanage_alerts_preferences_with_http_info(self, user_identifier, manage_alerts_preferencesdelete_payload, **kwargs):
        """
        Delete Existing Notification Preferences for given Customer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletemanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencesdelete_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param ManageAlertsPreferencesdeletePayload manage_alerts_preferencesdelete_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: ManageAlertsPreferencesdeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_identifier', 'manage_alerts_preferencesdelete_payload', 'app_group_id', 'app_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletemanage_alerts_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_identifier' is set
        if ('user_identifier' not in params) or (params['user_identifier'] is None):
            raise ValueError("Missing the required parameter `user_identifier` when calling `deletemanage_alerts_preferences`")
        # verify the required parameter 'manage_alerts_preferencesdelete_payload' is set
        if ('manage_alerts_preferencesdelete_payload' not in params) or (params['manage_alerts_preferencesdelete_payload'] is None):
            raise ValueError("Missing the required parameter `manage_alerts_preferencesdelete_payload` when calling `deletemanage_alerts_preferences`")


        collection_formats = {}

        path = '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'
        path_params = {}
        if 'user_identifier' in params:
            path_params['userIdentifier'] = params['user_identifier']

        query_params = {}

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'manage_alerts_preferencesdelete_payload' in params:
            body_params = params['manage_alerts_preferencesdelete_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ManageAlertsPreferencesdeleteResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_get_notification_details(self, limit, page, **kwargs):
        """
        Get notification details by documentID, decisionID, or userIdentifier. Note, only one parameter may be passed per request.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_get_notification_details(limit, page, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str limit: Page size to be returned (required)
        :param str page: Page number to be returned (required)
        :param str decision_id: Decision ID to search for
        :param str document_id: Control document ID to search for
        :param str notification_id: Notification ID to search for
        :param str user_identifier: User identifier to search for
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: GetNotificationDetailsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_get_notification_details_with_http_info(limit, page, **kwargs)
        else:
            (data) = self.get_get_notification_details_with_http_info(limit, page, **kwargs)
            return data

    def get_get_notification_details_with_http_info(self, limit, page, **kwargs):
        """
        Get notification details by documentID, decisionID, or userIdentifier. Note, only one parameter may be passed per request.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_get_notification_details_with_http_info(limit, page, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str limit: Page size to be returned (required)
        :param str page: Page number to be returned (required)
        :param str decision_id: Decision ID to search for
        :param str document_id: Control document ID to search for
        :param str notification_id: Notification ID to search for
        :param str user_identifier: User identifier to search for
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: GetNotificationDetailsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'page', 'decision_id', 'document_id', 'notification_id', 'user_identifier', 'app_group_id', 'app_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_notification_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params) or (params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_get_notification_details`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_get_notification_details`")


        collection_formats = {}

        path = '/vctc/customerrules/v1/consumertransactioncontrols/customer/notifications'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/customer/notifications'
        path_params = {}

        query_params = {}
        if 'decision_id' in params:
            query_params['decisionId'] = params['decision_id']
        if 'document_id' in params:
            query_params['documentId'] = params['document_id']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'notification_id' in params:
            query_params['notificationId'] = params['notification_id']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'user_identifier' in params:
            query_params['userIdentifier'] = params['user_identifier']

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetNotificationDetailsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getcustomer_alerts_profile(self, user_identifier, **kwargs):
        """
        Get Customer Profile by userIdentifier
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getcustomer_alerts_profile(user_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: CustomerAlertsProfilegetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getcustomer_alerts_profile_with_http_info(user_identifier, **kwargs)
        else:
            (data) = self.getcustomer_alerts_profile_with_http_info(user_identifier, **kwargs)
            return data

    def getcustomer_alerts_profile_with_http_info(self, user_identifier, **kwargs):
        """
        Get Customer Profile by userIdentifier
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getcustomer_alerts_profile_with_http_info(user_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: CustomerAlertsProfilegetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_identifier', 'app_group_id', 'app_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getcustomer_alerts_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_identifier' is set
        if ('user_identifier' not in params) or (params['user_identifier'] is None):
            raise ValueError("Missing the required parameter `user_identifier` when calling `getcustomer_alerts_profile`")


        collection_formats = {}

        path = '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/customer/{userIdentifier}'
        path_params = {}
        if 'user_identifier' in params:
            path_params['userIdentifier'] = params['user_identifier']

        query_params = {}

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomerAlertsProfilegetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def patchcustomer_alerts_profile(self, user_identifier, customer_alerts_profilepatch_payload, **kwargs):
        """
        Update Customer Profile by userIdentifier
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patchcustomer_alerts_profile(user_identifier, customer_alerts_profilepatch_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param CustomerAlertsProfilepatchPayload customer_alerts_profilepatch_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: CustomerAlertsProfilepatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patchcustomer_alerts_profile_with_http_info(user_identifier, customer_alerts_profilepatch_payload, **kwargs)
        else:
            (data) = self.patchcustomer_alerts_profile_with_http_info(user_identifier, customer_alerts_profilepatch_payload, **kwargs)
            return data

    def patchcustomer_alerts_profile_with_http_info(self, user_identifier, customer_alerts_profilepatch_payload, **kwargs):
        """
        Update Customer Profile by userIdentifier
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patchcustomer_alerts_profile_with_http_info(user_identifier, customer_alerts_profilepatch_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param CustomerAlertsProfilepatchPayload customer_alerts_profilepatch_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: CustomerAlertsProfilepatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_identifier', 'customer_alerts_profilepatch_payload', 'app_group_id', 'app_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patchcustomer_alerts_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_identifier' is set
        if ('user_identifier' not in params) or (params['user_identifier'] is None):
            raise ValueError("Missing the required parameter `user_identifier` when calling `patchcustomer_alerts_profile`")
        # verify the required parameter 'customer_alerts_profilepatch_payload' is set
        if ('customer_alerts_profilepatch_payload' not in params) or (params['customer_alerts_profilepatch_payload'] is None):
            raise ValueError("Missing the required parameter `customer_alerts_profilepatch_payload` when calling `patchcustomer_alerts_profile`")


        collection_formats = {}

        path = '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/customer/{userIdentifier}'
        path_params = {}
        if 'user_identifier' in params:
            path_params['userIdentifier'] = params['user_identifier']

        query_params = {}

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer_alerts_profilepatch_payload' in params:
            body_params = params['customer_alerts_profilepatch_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomerAlertsProfilepatchResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_get_notifications_summary_by_pan_or_token(self, get_notifications_summary_by_pan_or_tokenpost_payload, **kwargs):
        """
        Get notification summary by primaryAccountNumber or paymentToken
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_get_notifications_summary_by_pan_or_token(get_notifications_summary_by_pan_or_tokenpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GetNotificationsSummaryByPanOrTokenpostPayload get_notifications_summary_by_pan_or_tokenpost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: GetNotificationsSummaryByPanOrTokenpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_get_notifications_summary_by_pan_or_token_with_http_info(get_notifications_summary_by_pan_or_tokenpost_payload, **kwargs)
        else:
            (data) = self.post_get_notifications_summary_by_pan_or_token_with_http_info(get_notifications_summary_by_pan_or_tokenpost_payload, **kwargs)
            return data

    def post_get_notifications_summary_by_pan_or_token_with_http_info(self, get_notifications_summary_by_pan_or_tokenpost_payload, **kwargs):
        """
        Get notification summary by primaryAccountNumber or paymentToken
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_get_notifications_summary_by_pan_or_token_with_http_info(get_notifications_summary_by_pan_or_tokenpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GetNotificationsSummaryByPanOrTokenpostPayload get_notifications_summary_by_pan_or_tokenpost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: GetNotificationsSummaryByPanOrTokenpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_notifications_summary_by_pan_or_tokenpost_payload', 'app_group_id', 'app_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_get_notifications_summary_by_pan_or_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_notifications_summary_by_pan_or_tokenpost_payload' is set
        if ('get_notifications_summary_by_pan_or_tokenpost_payload' not in params) or (params['get_notifications_summary_by_pan_or_tokenpost_payload'] is None):
            raise ValueError("Missing the required parameter `get_notifications_summary_by_pan_or_tokenpost_payload` when calling `post_get_notifications_summary_by_pan_or_token`")


        collection_formats = {}

        path = '/vctc/customerrules/v1/consumertransactioncontrols/customer/notificationInquiry'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/customer/notificationInquiry'
        path_params = {}

        query_params = {}

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_notifications_summary_by_pan_or_tokenpost_payload' in params:
            body_params = params['get_notifications_summary_by_pan_or_tokenpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetNotificationsSummaryByPanOrTokenpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postcreate_customer_alert_profile(self, create_customer_alert_profilepost_payload, **kwargs):
        """
        Create New Customer Profile
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postcreate_customer_alert_profile(create_customer_alert_profilepost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateCustomerAlertProfilepostPayload create_customer_alert_profilepost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: CreateCustomerAlertProfilepostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postcreate_customer_alert_profile_with_http_info(create_customer_alert_profilepost_payload, **kwargs)
        else:
            (data) = self.postcreate_customer_alert_profile_with_http_info(create_customer_alert_profilepost_payload, **kwargs)
            return data

    def postcreate_customer_alert_profile_with_http_info(self, create_customer_alert_profilepost_payload, **kwargs):
        """
        Create New Customer Profile
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postcreate_customer_alert_profile_with_http_info(create_customer_alert_profilepost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateCustomerAlertProfilepostPayload create_customer_alert_profilepost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: CreateCustomerAlertProfilepostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_customer_alert_profilepost_payload', 'app_group_id', 'app_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postcreate_customer_alert_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_customer_alert_profilepost_payload' is set
        if ('create_customer_alert_profilepost_payload' not in params) or (params['create_customer_alert_profilepost_payload'] is None):
            raise ValueError("Missing the required parameter `create_customer_alert_profilepost_payload` when calling `postcreate_customer_alert_profile`")


        collection_formats = {}

        path = '/vctc/customerrules/v1/consumertransactioncontrols/customer'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/customer'
        path_params = {}

        query_params = {}

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_customer_alert_profilepost_payload' in params:
            body_params = params['create_customer_alert_profilepost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateCustomerAlertProfilepostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postmanage_alerts_preferences(self, user_identifier, manage_alerts_preferencespost_payload, **kwargs):
        """
        Create New Notification Preferences for given Customer Profile
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmanage_alerts_preferences(user_identifier, manage_alerts_preferencespost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param ManageAlertsPreferencespostPayload manage_alerts_preferencespost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: ManageAlertsPreferencespostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postmanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencespost_payload, **kwargs)
        else:
            (data) = self.postmanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencespost_payload, **kwargs)
            return data

    def postmanage_alerts_preferences_with_http_info(self, user_identifier, manage_alerts_preferencespost_payload, **kwargs):
        """
        Create New Notification Preferences for given Customer Profile
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencespost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param ManageAlertsPreferencespostPayload manage_alerts_preferencespost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: ManageAlertsPreferencespostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_identifier', 'manage_alerts_preferencespost_payload', 'app_group_id', 'app_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postmanage_alerts_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_identifier' is set
        if ('user_identifier' not in params) or (params['user_identifier'] is None):
            raise ValueError("Missing the required parameter `user_identifier` when calling `postmanage_alerts_preferences`")
        # verify the required parameter 'manage_alerts_preferencespost_payload' is set
        if ('manage_alerts_preferencespost_payload' not in params) or (params['manage_alerts_preferencespost_payload'] is None):
            raise ValueError("Missing the required parameter `manage_alerts_preferencespost_payload` when calling `postmanage_alerts_preferences`")


        collection_formats = {}

        path = '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'
        path_params = {}
        if 'user_identifier' in params:
            path_params['userIdentifier'] = params['user_identifier']

        query_params = {}

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'manage_alerts_preferencespost_payload' in params:
            body_params = params['manage_alerts_preferencespost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ManageAlertsPreferencespostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def putmanage_alerts_preferences(self, user_identifier, manage_alerts_preferencesput_payload, **kwargs):
        """
        Update Existing Notification Preferences for given Customer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.putmanage_alerts_preferences(user_identifier, manage_alerts_preferencesput_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param ManageAlertsPreferencesputPayload manage_alerts_preferencesput_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: ManageAlertsPreferencesputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.putmanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencesput_payload, **kwargs)
        else:
            (data) = self.putmanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencesput_payload, **kwargs)
            return data

    def putmanage_alerts_preferences_with_http_info(self, user_identifier, manage_alerts_preferencesput_payload, **kwargs):
        """
        Update Existing Notification Preferences for given Customer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.putmanage_alerts_preferences_with_http_info(user_identifier, manage_alerts_preferencesput_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_identifier: The user identifier of the customer profile document (required)
        :param ManageAlertsPreferencesputPayload manage_alerts_preferencesput_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: ManageAlertsPreferencesputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_identifier', 'manage_alerts_preferencesput_payload', 'app_group_id', 'app_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method putmanage_alerts_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_identifier' is set
        if ('user_identifier' not in params) or (params['user_identifier'] is None):
            raise ValueError("Missing the required parameter `user_identifier` when calling `putmanage_alerts_preferences`")
        # verify the required parameter 'manage_alerts_preferencesput_payload' is set
        if ('manage_alerts_preferencesput_payload' not in params) or (params['manage_alerts_preferencesput_payload'] is None):
            raise ValueError("Missing the required parameter `manage_alerts_preferencesput_payload` when calling `putmanage_alerts_preferences`")


        collection_formats = {}

        path = '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'
        path_params = {}
        if 'user_identifier' in params:
            path_params['userIdentifier'] = params['user_identifier']

        query_params = {}

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'manage_alerts_preferencesput_payload' in params:
            body_params = params['manage_alerts_preferencesput_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ManageAlertsPreferencesputResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------