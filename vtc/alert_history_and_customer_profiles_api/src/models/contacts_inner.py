# coding: utf-8

"""
    Alert History and Customer Profiles API

    The Alert History and Customer Profiles API is used to retrieve alert history information and for issuers using the VTC Alert Delivery Service to store cardholder contact information.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ContactsInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, contact_value=None, is_verified=None, contact_type=None):
        """
        ContactsInner - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'contact_value': 'str',
            'is_verified': 'bool',
            'contact_type': 'str'
        }

        self.attribute_map = {
            'status': 'status',
            'contact_value': 'contactValue',
            'is_verified': 'isVerified',
            'contact_type': 'contactType'
        }

        self._status = status
        self._contact_value = contact_value
        self._is_verified = is_verified
        self._contact_type = contact_type

    @property
    def status(self):
        """
        Gets the status of this ContactsInner.
        Indicates to VTC if it should use this contact information when sending the related alert. It must be set to 'Active' for use. If 'InAactive' then VTC will ignore this contact information and use the default contact preference. Only for clients who participate in the VTC Alert Delivery Service. 

        :return: The status of this ContactsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ContactsInner.
        Indicates to VTC if it should use this contact information when sending the related alert. It must be set to 'Active' for use. If 'InAactive' then VTC will ignore this contact information and use the default contact preference. Only for clients who participate in the VTC Alert Delivery Service. 

        :param status: The status of this ContactsInner.
        :type: str
        """

        self._status = status

    @property
    def contact_value(self):
        """
        Gets the contact_value of this ContactsInner.
        The email address, phone number or device ID associated with the contactType. Maximum of 50 characters.

        :return: The contact_value of this ContactsInner.
        :rtype: str
        """
        return self._contact_value

    @contact_value.setter
    def contact_value(self, contact_value):
        """
        Sets the contact_value of this ContactsInner.
        The email address, phone number or device ID associated with the contactType. Maximum of 50 characters.

        :param contact_value: The contact_value of this ContactsInner.
        :type: str
        """
        if contact_value is None:
            raise ValueError("Invalid value for `contact_value`, must not be `None`")

        self._contact_value = contact_value

    @property
    def is_verified(self):
        """
        Gets the is_verified of this ContactsInner.
        Indicates if the issuer (or their authorized agent) have verifed the contact data provided. Must be set to true for issuers who utilize the VTC Alert Delivery Service. 

        :return: The is_verified of this ContactsInner.
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """
        Sets the is_verified of this ContactsInner.
        Indicates if the issuer (or their authorized agent) have verifed the contact data provided. Must be set to true for issuers who utilize the VTC Alert Delivery Service. 

        :param is_verified: The is_verified of this ContactsInner.
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def contact_type(self):
        """
        Gets the contact_type of this ContactsInner.
        The delivery channel to be used when sending the alert message. Supported channels include SMS, Push, Email. (In Sandbox only Email is supported.)

        :return: The contact_type of this ContactsInner.
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """
        Sets the contact_type of this ContactsInner.
        The delivery channel to be used when sending the alert message. Supported channels include SMS, Push, Email. (In Sandbox only Email is supported.)

        :param contact_type: The contact_type of this ContactsInner.
        :type: str
        """
        if contact_type is None:
            raise ValueError("Invalid value for `contact_type`, must not be `None`")

        self._contact_type = contact_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContactsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------