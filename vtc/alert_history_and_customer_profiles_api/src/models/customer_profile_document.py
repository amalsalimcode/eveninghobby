# coding: utf-8

"""
    Alert History and Customer Profiles API

    The Alert History and Customer Profiles API is used to retrieve alert history information and for issuers using the VTC Alert Delivery Service to store cardholder contact information.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerProfileDocument(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, first_name=None, last_update_time_stamp=None, preferred_language=None, last_name=None, preferred_country_code=None, is_profile_active=None, user_identifier=None, alerts_preferences=None, default_alerts_preferences=None):
        """
        CustomerProfileDocument - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'first_name': 'str',
            'last_update_time_stamp': 'str',
            'preferred_language': 'str',
            'last_name': 'str',
            'preferred_country_code': 'str',
            'is_profile_active': 'bool',
            'user_identifier': 'str',
            'alerts_preferences': 'AlertsPreferences',
            'default_alerts_preferences': 'DefaultAlertsPreferences'
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_update_time_stamp': 'lastUpdateTimeStamp',
            'preferred_language': 'preferredLanguage',
            'last_name': 'lastName',
            'preferred_country_code': 'preferredCountryCode',
            'is_profile_active': 'isProfileActive',
            'user_identifier': 'userIdentifier',
            'alerts_preferences': 'alertsPreferences',
            'default_alerts_preferences': 'defaultAlertsPreferences'
        }

        self._first_name = first_name
        self._last_update_time_stamp = last_update_time_stamp
        self._preferred_language = preferred_language
        self._last_name = last_name
        self._preferred_country_code = preferred_country_code
        self._is_profile_active = is_profile_active
        self._user_identifier = user_identifier
        self._alerts_preferences = alerts_preferences
        self._default_alerts_preferences = default_alerts_preferences

    @property
    def first_name(self):
        """
        Gets the first_name of this CustomerProfileDocument.
        First name of the Card Holder, Maximum of 25 characters

        :return: The first_name of this CustomerProfileDocument.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this CustomerProfileDocument.
        First name of the Card Holder, Maximum of 25 characters

        :param first_name: The first_name of this CustomerProfileDocument.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_update_time_stamp(self):
        """
        Gets the last_update_time_stamp of this CustomerProfileDocument.
        Provides the timestamp, in GMT, of when this profile was last updated.

        :return: The last_update_time_stamp of this CustomerProfileDocument.
        :rtype: str
        """
        return self._last_update_time_stamp

    @last_update_time_stamp.setter
    def last_update_time_stamp(self, last_update_time_stamp):
        """
        Sets the last_update_time_stamp of this CustomerProfileDocument.
        Provides the timestamp, in GMT, of when this profile was last updated.

        :param last_update_time_stamp: The last_update_time_stamp of this CustomerProfileDocument.
        :type: str
        """

        self._last_update_time_stamp = last_update_time_stamp

    @property
    def preferred_language(self):
        """
        Gets the preferred_language of this CustomerProfileDocument.
        Preferred Language for Last mile Alerts , Currently supported languages are 'en-us' (English US) and 'es-us'(Spanish US)

        :return: The preferred_language of this CustomerProfileDocument.
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """
        Sets the preferred_language of this CustomerProfileDocument.
        Preferred Language for Last mile Alerts , Currently supported languages are 'en-us' (English US) and 'es-us'(Spanish US)

        :param preferred_language: The preferred_language of this CustomerProfileDocument.
        :type: str
        """
        if preferred_language is None:
            raise ValueError("Invalid value for `preferred_language`, must not be `None`")

        self._preferred_language = preferred_language

    @property
    def last_name(self):
        """
        Gets the last_name of this CustomerProfileDocument.
        Last name of the Card Holder, Maximum of 25 characters

        :return: The last_name of this CustomerProfileDocument.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this CustomerProfileDocument.
        Last name of the Card Holder, Maximum of 25 characters

        :param last_name: The last_name of this CustomerProfileDocument.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def preferred_country_code(self):
        """
        Gets the preferred_country_code of this CustomerProfileDocument.
        Three letter ISO ALPHA-3 Code, currently only 'USA' supported

        :return: The preferred_country_code of this CustomerProfileDocument.
        :rtype: str
        """
        return self._preferred_country_code

    @preferred_country_code.setter
    def preferred_country_code(self, preferred_country_code):
        """
        Sets the preferred_country_code of this CustomerProfileDocument.
        Three letter ISO ALPHA-3 Code, currently only 'USA' supported

        :param preferred_country_code: The preferred_country_code of this CustomerProfileDocument.
        :type: str
        """
        if preferred_country_code is None:
            raise ValueError("Invalid value for `preferred_country_code`, must not be `None`")

        self._preferred_country_code = preferred_country_code

    @property
    def is_profile_active(self):
        """
        Gets the is_profile_active of this CustomerProfileDocument.
        This value determine if the given customer profile is Active or Inactive. If isProfileActive is set to false then last Mile alerts cannot be delivered for this Customer Profile.

        :return: The is_profile_active of this CustomerProfileDocument.
        :rtype: bool
        """
        return self._is_profile_active

    @is_profile_active.setter
    def is_profile_active(self, is_profile_active):
        """
        Sets the is_profile_active of this CustomerProfileDocument.
        This value determine if the given customer profile is Active or Inactive. If isProfileActive is set to false then last Mile alerts cannot be delivered for this Customer Profile.

        :param is_profile_active: The is_profile_active of this CustomerProfileDocument.
        :type: bool
        """
        if is_profile_active is None:
            raise ValueError("Invalid value for `is_profile_active`, must not be `None`")

        self._is_profile_active = is_profile_active

    @property
    def user_identifier(self):
        """
        Gets the user_identifier of this CustomerProfileDocument.
        The value provided by the Issuer to uniquely identify the Card Holder, Maximum of 72 characters

        :return: The user_identifier of this CustomerProfileDocument.
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """
        Sets the user_identifier of this CustomerProfileDocument.
        The value provided by the Issuer to uniquely identify the Card Holder, Maximum of 72 characters

        :param user_identifier: The user_identifier of this CustomerProfileDocument.
        :type: str
        """
        if user_identifier is None:
            raise ValueError("Invalid value for `user_identifier`, must not be `None`")

        self._user_identifier = user_identifier

    @property
    def alerts_preferences(self):
        """
        Gets the alerts_preferences of this CustomerProfileDocument.

        :return: The alerts_preferences of this CustomerProfileDocument.
        :rtype: AlertsPreferences
        """
        return self._alerts_preferences

    @alerts_preferences.setter
    def alerts_preferences(self, alerts_preferences):
        """
        Sets the alerts_preferences of this CustomerProfileDocument.

        :param alerts_preferences: The alerts_preferences of this CustomerProfileDocument.
        :type: AlertsPreferences
        """
        if alerts_preferences is None:
            raise ValueError("Invalid value for `alerts_preferences`, must not be `None`")

        self._alerts_preferences = alerts_preferences

    @property
    def default_alerts_preferences(self):
        """
        Gets the default_alerts_preferences of this CustomerProfileDocument.

        :return: The default_alerts_preferences of this CustomerProfileDocument.
        :rtype: DefaultAlertsPreferences
        """
        return self._default_alerts_preferences

    @default_alerts_preferences.setter
    def default_alerts_preferences(self, default_alerts_preferences):
        """
        Sets the default_alerts_preferences of this CustomerProfileDocument.

        :param default_alerts_preferences: The default_alerts_preferences of this CustomerProfileDocument.
        :type: DefaultAlertsPreferences
        """
        if default_alerts_preferences is None:
            raise ValueError("Invalid value for `default_alerts_preferences`, must not be `None`")

        self._default_alerts_preferences = default_alerts_preferences

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerProfileDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------