# coding: utf-8

"""
    Alert History and Customer Profiles API

    The Alert History and Customer Profiles API is used to retrieve alert history information and for issuers using the VTC Alert Delivery Service to store cardholder contact information.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateCustomerAlertProfilepostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, country_code=None, first_name=None, preferred_language=None, last_name=None, default_alerts_preferences=None, primary_account_number=None, payment_token=None, user_identifier=None):
        """
        CreateCustomerAlertProfilepostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'country_code': 'str',
            'first_name': 'str',
            'preferred_language': 'str',
            'last_name': 'str',
            'default_alerts_preferences': 'DefaultAlertsPreferences',
            'primary_account_number': 'str',
            'payment_token': 'str',
            'user_identifier': 'str'
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'first_name': 'firstName',
            'preferred_language': 'preferredLanguage',
            'last_name': 'lastName',
            'default_alerts_preferences': 'defaultAlertsPreferences',
            'primary_account_number': 'primaryAccountNumber',
            'payment_token': 'paymentToken',
            'user_identifier': 'userIdentifier'
        }

        self._country_code = country_code
        self._first_name = first_name
        self._preferred_language = preferred_language
        self._last_name = last_name
        self._default_alerts_preferences = default_alerts_preferences
        self._primary_account_number = primary_account_number
        self._payment_token = payment_token
        self._user_identifier = user_identifier

    @property
    def country_code(self):
        """
        Gets the country_code of this CreateCustomerAlertProfilepostPayload.
        Three letter ISO ALPHA-3 Code. Required if participating in VTC Alert Delivery Service.

        :return: The country_code of this CreateCustomerAlertProfilepostPayload.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this CreateCustomerAlertProfilepostPayload.
        Three letter ISO ALPHA-3 Code. Required if participating in VTC Alert Delivery Service.

        :param country_code: The country_code of this CreateCustomerAlertProfilepostPayload.
        :type: str
        """

        self._country_code = country_code

    @property
    def first_name(self):
        """
        Gets the first_name of this CreateCustomerAlertProfilepostPayload.
        First name of the cardholder, Maximum of 25 characters.

        :return: The first_name of this CreateCustomerAlertProfilepostPayload.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this CreateCustomerAlertProfilepostPayload.
        First name of the cardholder, Maximum of 25 characters.

        :param first_name: The first_name of this CreateCustomerAlertProfilepostPayload.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def preferred_language(self):
        """
        Gets the preferred_language of this CreateCustomerAlertProfilepostPayload.
        Preferred language for last mile alerts. Currently supported languages are 'en-us' (English US) and 'es-us'(Spanish US). Required if participating in VTC Alert Delivery Service.

        :return: The preferred_language of this CreateCustomerAlertProfilepostPayload.
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """
        Sets the preferred_language of this CreateCustomerAlertProfilepostPayload.
        Preferred language for last mile alerts. Currently supported languages are 'en-us' (English US) and 'es-us'(Spanish US). Required if participating in VTC Alert Delivery Service.

        :param preferred_language: The preferred_language of this CreateCustomerAlertProfilepostPayload.
        :type: str
        """

        self._preferred_language = preferred_language

    @property
    def last_name(self):
        """
        Gets the last_name of this CreateCustomerAlertProfilepostPayload.
        Last name of the cardholder, Maximum of 25 characters.

        :return: The last_name of this CreateCustomerAlertProfilepostPayload.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this CreateCustomerAlertProfilepostPayload.
        Last name of the cardholder, Maximum of 25 characters.

        :param last_name: The last_name of this CreateCustomerAlertProfilepostPayload.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def default_alerts_preferences(self):
        """
        Gets the default_alerts_preferences of this CreateCustomerAlertProfilepostPayload.

        :return: The default_alerts_preferences of this CreateCustomerAlertProfilepostPayload.
        :rtype: DefaultAlertsPreferences
        """
        return self._default_alerts_preferences

    @default_alerts_preferences.setter
    def default_alerts_preferences(self, default_alerts_preferences):
        """
        Sets the default_alerts_preferences of this CreateCustomerAlertProfilepostPayload.

        :param default_alerts_preferences: The default_alerts_preferences of this CreateCustomerAlertProfilepostPayload.
        :type: DefaultAlertsPreferences
        """
        if default_alerts_preferences is None:
            raise ValueError("Invalid value for `default_alerts_preferences`, must not be `None`")

        self._default_alerts_preferences = default_alerts_preferences

    @property
    def primary_account_number(self):
        """
        Gets the primary_account_number of this CreateCustomerAlertProfilepostPayload.
        Primary account number passed in the request for registration.

        :return: The primary_account_number of this CreateCustomerAlertProfilepostPayload.
        :rtype: str
        """
        return self._primary_account_number

    @primary_account_number.setter
    def primary_account_number(self, primary_account_number):
        """
        Sets the primary_account_number of this CreateCustomerAlertProfilepostPayload.
        Primary account number passed in the request for registration.

        :param primary_account_number: The primary_account_number of this CreateCustomerAlertProfilepostPayload.
        :type: str
        """

        self._primary_account_number = primary_account_number

    @property
    def payment_token(self):
        """
        Gets the payment_token of this CreateCustomerAlertProfilepostPayload.
        Payment token passed in the request for registration.

        :return: The payment_token of this CreateCustomerAlertProfilepostPayload.
        :rtype: str
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """
        Sets the payment_token of this CreateCustomerAlertProfilepostPayload.
        Payment token passed in the request for registration.

        :param payment_token: The payment_token of this CreateCustomerAlertProfilepostPayload.
        :type: str
        """

        self._payment_token = payment_token

    @property
    def user_identifier(self):
        """
        Gets the user_identifier of this CreateCustomerAlertProfilepostPayload.
        Assigned by the enrolling application to uniquely identify a specific Customer. Ideally a GUID, the userIdentifier must not contain any PII data. Maximum of 72 characters.

        :return: The user_identifier of this CreateCustomerAlertProfilepostPayload.
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """
        Sets the user_identifier of this CreateCustomerAlertProfilepostPayload.
        Assigned by the enrolling application to uniquely identify a specific Customer. Ideally a GUID, the userIdentifier must not contain any PII data. Maximum of 72 characters.

        :param user_identifier: The user_identifier of this CreateCustomerAlertProfilepostPayload.
        :type: str
        """
        if user_identifier is None:
            raise ValueError("Invalid value for `user_identifier`, must not be `None`")

        self._user_identifier = user_identifier

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateCustomerAlertProfilepostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------