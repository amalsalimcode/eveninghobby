# coding: utf-8

"""
    Alert History and Customer Profiles API

    The Alert History and Customer Profiles API is used to retrieve alert history information and for issuers using the VTC Alert Delivery Service to store cardholder contact information.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AlertPreferencesInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alert_type=None, control_type=None, contacts=None):
        """
        AlertPreferencesInner - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alert_type': 'str',
            'control_type': 'str',
            'contacts': 'Contacts'
        }

        self.attribute_map = {
            'alert_type': 'alertType',
            'control_type': 'controlType',
            'contacts': 'contacts'
        }

        self._alert_type = alert_type
        self._control_type = control_type
        self._contacts = contacts

    @property
    def alert_type(self):
        """
        Gets the alert_type of this AlertPreferencesInner.
        All VTC supported transction Events where Alerts can be Generated .  Currently supported events are  'DECLINE_ALL','DECLINE_BREACHED_AMT','ALERT_BREACHED_AMT','DECLINE_BY_SPEND_LIMIT','ALERT_BREACHED_SPEND','DECLINE_BY_ISSUER' For DECLINE_BY_ISSUER alerts Type applies to all control type so only control type values supported with DECLINE_BY_ISSUER is ALL. 

        :return: The alert_type of this AlertPreferencesInner.
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """
        Sets the alert_type of this AlertPreferencesInner.
        All VTC supported transction Events where Alerts can be Generated .  Currently supported events are  'DECLINE_ALL','DECLINE_BREACHED_AMT','ALERT_BREACHED_AMT','DECLINE_BY_SPEND_LIMIT','ALERT_BREACHED_SPEND','DECLINE_BY_ISSUER' For DECLINE_BY_ISSUER alerts Type applies to all control type so only control type values supported with DECLINE_BY_ISSUER is ALL. 

        :param alert_type: The alert_type of this AlertPreferencesInner.
        :type: str
        """
        if alert_type is None:
            raise ValueError("Invalid value for `alert_type`, must not be `None`")

        self._alert_type = alert_type

    @property
    def control_type(self):
        """
        Gets the control_type of this AlertPreferencesInner.
         All VTC supported transaction and merchant control types against which the alert can be configured. Currently Control Type 'ALL' is only supported with alerts Type 'DECLINE_BY_ISSUER'.

        :return: The control_type of this AlertPreferencesInner.
        :rtype: str
        """
        return self._control_type

    @control_type.setter
    def control_type(self, control_type):
        """
        Sets the control_type of this AlertPreferencesInner.
         All VTC supported transaction and merchant control types against which the alert can be configured. Currently Control Type 'ALL' is only supported with alerts Type 'DECLINE_BY_ISSUER'.

        :param control_type: The control_type of this AlertPreferencesInner.
        :type: str
        """
        if control_type is None:
            raise ValueError("Invalid value for `control_type`, must not be `None`")

        self._control_type = control_type

    @property
    def contacts(self):
        """
        Gets the contacts of this AlertPreferencesInner.

        :return: The contacts of this AlertPreferencesInner.
        :rtype: Contacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this AlertPreferencesInner.

        :param contacts: The contacts of this AlertPreferencesInner.
        :type: Contacts
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")

        self._contacts = contacts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertPreferencesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------