# coding: utf-8

"""
    Alert History and Customer Profiles API

    The Alert History and Customer Profiles API is used to retrieve alert history information and for issuers using the VTC Alert Delivery Service to store cardholder contact information.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest
import datetime
import pytz
import random
import string
import re
import json

from src.apis.customer_rules_alerts_api import CustomerRulesAlertsApi
from src.configuration import Configuration
from globalConfig import GlobalConfig


class TestCustomerRulesAlertsApi(unittest.TestCase):
    """ CustomerRulesAlertsApi unit test stubs """

    @classmethod
    def setUpClass(self):
        print("---------------------------------------Tests---------------------------------------\nProduct Name: Visa Transaction Controls\nApi Name: Alert History and Customer Profiles API")
        globalConfig = GlobalConfig()
        config = Configuration()
        config.username = globalConfig.userName
        config.password = globalConfig.password
        config.cert_file = globalConfig.certificatePath
        config.key_file = globalConfig.privateKeyPath
        config.shared_secret = globalConfig.sharedSecret
        config.api_key['apikey'] = globalConfig.apiKey
        config.ssl_ca_cert = globalConfig.caCertPath
        config.proxy_url = globalConfig.proxyUrl
        self.api = CustomerRulesAlertsApi(None)

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def transformPayload(self, payload):
        payload = self.editLocalTime(payload)
        payload = self.addRandom(payload)
        payload = json.loads(payload)
        return payload

    def editLocalTime(self, payload):
        timezone = pytz.timezone("America/Los_Angeles")
        timestamp = timezone.localize(datetime.datetime.now()).strftime('%Y-%m-%dT%H:%M:%S')
        pattern = re.compile('"localTransactionDateTime":".{19}"', re.IGNORECASE)
        replacement = '"localTransactionDateTime": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)

        timestamp = timezone.localize(datetime.datetime.now()).strftime('%m%d%H%M%S')
        pattern = re.compile('"dateTimeLocal":".{10}"', re.IGNORECASE)
        replacement = '"dateTimeLocal": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)
        return payload

    def addRandom(self, payload):
        if payload == 'mle_keyId':
            return self.mleKeyId
        payload = re.sub(r'random_string', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        payload = re.sub(r'random_integer', ''.join(random.choice(string.digits) for _ in range(8)), payload)
        payload= re.sub(r'random', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        return payload

    """
    Test case for deletemanage_alerts_preferences

    .
    """
    def testdeletemanage_alerts_preferences(self):
        print("\ndeletemanage_alerts_preferences")
        result = self.api.deletemanage_alerts_preferences(self.addRandom('random'), self.transformPayload('{"alertPreferences":[{"alertType":"DECLINE_ALL","controlType":"TCT_ATM_WITHDRAW","contacts":[{"status":"Active","contactValue":"suresh@yahoo.co.in","isVerified":true,"contactType":"Email"}]}]}'), )
        pass

    """
    Test case for get_get_notification_details

    .
    """
    def testget_get_notification_details(self):
        print("\nget_get_notification_details")
        result = self.api.get_get_notification_details(self.addRandom('random'), self.addRandom('random'), )
        pass

    """
    Test case for getcustomer_alerts_profile

    .
    """
    def testgetcustomer_alerts_profile(self):
        print("\ngetcustomer_alerts_profile")
        result = self.api.getcustomer_alerts_profile(self.addRandom('random'), )
        pass

    """
    Test case for patchcustomer_alerts_profile

    .
    """
    def testpatchcustomer_alerts_profile(self):
        print("\npatchcustomer_alerts_profile")
        result = self.api.patchcustomer_alerts_profile(self.addRandom('random'), self.transformPayload('{"preferredLanguage":"en-us","lastName":"John","isProfileActive":false,"defaultAlertsPreferences":[{"status":"Active","contactValue":"ric@abc.com","isVerified":true,"contactType":"Email"}],"firstName":"Ric"}'), )
        pass

    """
    Test case for post_get_notifications_summary_by_pan_or_token

    .
    """
    def testpost_get_notifications_summary_by_pan_or_token(self):
        print("\npost_get_notifications_summary_by_pan_or_token")
        result = self.api.post_get_notifications_summary_by_pan_or_token(self.transformPayload('{"pagination":{"startIndex":"1","pageLimit":"4"},"includeAlertDetails":true,"includeMerchantDetails":true,"timeRange":{"endTime":"2018-06-01 23:59:00","startTime":"2018-04-01 00:00:00"},"includeContactDetails":true,"primaryAccountNumber":"4566929790034312889"}'), )
        pass

    """
    Test case for postcreate_customer_alert_profile

    .
    """
    def testpostcreate_customer_alert_profile(self):
        print("\npostcreate_customer_alert_profile")
        result = self.api.postcreate_customer_alert_profile(self.transformPayload('{"countryCode":"USA","firstName":"Ric","preferredLanguage":"en-us","lastName":"John","defaultAlertsPreferences":[{"status":"Active","contactValue":"abhishek@abc.com","isVerified":true,"contactType":"Email"}],"primaryAccountNumber":"4514170000000001","userIdentifier":"8g2XUnKmMS"}'), )
        pass

    """
    Test case for postmanage_alerts_preferences

    .
    """
    def testpostmanage_alerts_preferences(self):
        print("\npostmanage_alerts_preferences")
        result = self.api.postmanage_alerts_preferences(self.addRandom('random'), self.transformPayload('{"alertPreferences":[{"alertType":"DECLINE_ALL","controlType":"TCT_ATM_WITHDRAW","contacts":[{"status":"Active","contactValue":"suresh@yahoo.co.in","isVerified":true,"contactType":"Email"}]}]}'), )
        pass

    """
    Test case for putmanage_alerts_preferences

    .
    """
    def testputmanage_alerts_preferences(self):
        print("\nputmanage_alerts_preferences")
        result = self.api.putmanage_alerts_preferences(self.addRandom('random'), self.transformPayload('{"alertPreferences":[{"alertType":"DECLINE_ALL","controlType":"MCT_CAR_RENTAL","contacts":[{"status":"Active","contactValue":"suresh@yahoo.co.in","isVerified":true,"contactType":"Email"}]}]}'), )
        pass


if __name__ == '__main__':
    unittest.main()


# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------