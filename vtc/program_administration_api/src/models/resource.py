# coding: utf-8

"""
    Program Administration API

    The Transaction Controls Program Administration API enables Issuers to change program configurations for their sponsorID.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Resource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, available_control_types=None, available_payment_rule_types=None, last_update_time_stamp=None, configured_merchant_type_rules=None, available_merchant_type_rules=None, configured_transaction_type_rules=None, configured_payment_rule_types=None, available_transaction_type_rules=None):
        """
        Resource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'available_control_types': 'str',
            'available_payment_rule_types': 'str',
            'last_update_time_stamp': 'str',
            'configured_merchant_type_rules': 'str',
            'available_merchant_type_rules': 'str',
            'configured_transaction_type_rules': 'str',
            'configured_payment_rule_types': 'str',
            'available_transaction_type_rules': 'str'
        }

        self.attribute_map = {
            'status': 'status',
            'available_control_types': 'availableControlTypes',
            'available_payment_rule_types': 'availablePaymentRuleTypes',
            'last_update_time_stamp': 'lastUpdateTimeStamp',
            'configured_merchant_type_rules': 'configuredMerchantTypeRules',
            'available_merchant_type_rules': 'availableMerchantTypeRules',
            'configured_transaction_type_rules': 'configuredTransactionTypeRules',
            'configured_payment_rule_types': 'configuredPaymentRuleTypes',
            'available_transaction_type_rules': 'availableTransactionTypeRules'
        }

        self._status = status
        self._available_control_types = available_control_types
        self._available_payment_rule_types = available_payment_rule_types
        self._last_update_time_stamp = last_update_time_stamp
        self._configured_merchant_type_rules = configured_merchant_type_rules
        self._available_merchant_type_rules = available_merchant_type_rules
        self._configured_transaction_type_rules = configured_transaction_type_rules
        self._configured_payment_rule_types = configured_payment_rule_types
        self._available_transaction_type_rules = available_transaction_type_rules

    @property
    def status(self):
        """
        Gets the status of this Resource.
        status for this category or rule type

        :return: The status of this Resource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Resource.
        status for this category or rule type

        :param status: The status of this Resource.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def available_control_types(self):
        """
        Gets the available_control_types of this Resource.
        

        :return: The available_control_types of this Resource.
        :rtype: str
        """
        return self._available_control_types

    @available_control_types.setter
    def available_control_types(self, available_control_types):
        """
        Sets the available_control_types of this Resource.
        

        :param available_control_types: The available_control_types of this Resource.
        :type: str
        """

        self._available_control_types = available_control_types

    @property
    def available_payment_rule_types(self):
        """
        Gets the available_payment_rule_types of this Resource.
        Rule categories available for this card

        :return: The available_payment_rule_types of this Resource.
        :rtype: str
        """
        return self._available_payment_rule_types

    @available_payment_rule_types.setter
    def available_payment_rule_types(self, available_payment_rule_types):
        """
        Sets the available_payment_rule_types of this Resource.
        Rule categories available for this card

        :param available_payment_rule_types: The available_payment_rule_types of this Resource.
        :type: str
        """

        self._available_payment_rule_types = available_payment_rule_types

    @property
    def last_update_time_stamp(self):
        """
        Gets the last_update_time_stamp of this Resource.
        The time the sponsor configuration was updated.  Value is in GMT time

        :return: The last_update_time_stamp of this Resource.
        :rtype: str
        """
        return self._last_update_time_stamp

    @last_update_time_stamp.setter
    def last_update_time_stamp(self, last_update_time_stamp):
        """
        Sets the last_update_time_stamp of this Resource.
        The time the sponsor configuration was updated.  Value is in GMT time

        :param last_update_time_stamp: The last_update_time_stamp of this Resource.
        :type: str
        """

        self._last_update_time_stamp = last_update_time_stamp

    @property
    def configured_merchant_type_rules(self):
        """
        Gets the configured_merchant_type_rules of this Resource.
        Merchant control types asigned to this card

        :return: The configured_merchant_type_rules of this Resource.
        :rtype: str
        """
        return self._configured_merchant_type_rules

    @configured_merchant_type_rules.setter
    def configured_merchant_type_rules(self, configured_merchant_type_rules):
        """
        Sets the configured_merchant_type_rules of this Resource.
        Merchant control types asigned to this card

        :param configured_merchant_type_rules: The configured_merchant_type_rules of this Resource.
        :type: str
        """

        self._configured_merchant_type_rules = configured_merchant_type_rules

    @property
    def available_merchant_type_rules(self):
        """
        Gets the available_merchant_type_rules of this Resource.
        Merchant control types available for this card

        :return: The available_merchant_type_rules of this Resource.
        :rtype: str
        """
        return self._available_merchant_type_rules

    @available_merchant_type_rules.setter
    def available_merchant_type_rules(self, available_merchant_type_rules):
        """
        Sets the available_merchant_type_rules of this Resource.
        Merchant control types available for this card

        :param available_merchant_type_rules: The available_merchant_type_rules of this Resource.
        :type: str
        """

        self._available_merchant_type_rules = available_merchant_type_rules

    @property
    def configured_transaction_type_rules(self):
        """
        Gets the configured_transaction_type_rules of this Resource.
        Transaction control types assigned to this card

        :return: The configured_transaction_type_rules of this Resource.
        :rtype: str
        """
        return self._configured_transaction_type_rules

    @configured_transaction_type_rules.setter
    def configured_transaction_type_rules(self, configured_transaction_type_rules):
        """
        Sets the configured_transaction_type_rules of this Resource.
        Transaction control types assigned to this card

        :param configured_transaction_type_rules: The configured_transaction_type_rules of this Resource.
        :type: str
        """

        self._configured_transaction_type_rules = configured_transaction_type_rules

    @property
    def configured_payment_rule_types(self):
        """
        Gets the configured_payment_rule_types of this Resource.
        Rule categories assigned to this card

        :return: The configured_payment_rule_types of this Resource.
        :rtype: str
        """
        return self._configured_payment_rule_types

    @configured_payment_rule_types.setter
    def configured_payment_rule_types(self, configured_payment_rule_types):
        """
        Sets the configured_payment_rule_types of this Resource.
        Rule categories assigned to this card

        :param configured_payment_rule_types: The configured_payment_rule_types of this Resource.
        :type: str
        """

        self._configured_payment_rule_types = configured_payment_rule_types

    @property
    def available_transaction_type_rules(self):
        """
        Gets the available_transaction_type_rules of this Resource.
        Transaction control types available for this card

        :return: The available_transaction_type_rules of this Resource.
        :rtype: str
        """
        return self._available_transaction_type_rules

    @available_transaction_type_rules.setter
    def available_transaction_type_rules(self, available_transaction_type_rules):
        """
        Sets the available_transaction_type_rules of this Resource.
        Transaction control types available for this card

        :param available_transaction_type_rules: The available_transaction_type_rules of this Resource.
        :type: str
        """

        self._available_transaction_type_rules = available_transaction_type_rules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Resource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------