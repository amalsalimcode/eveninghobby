# coding: utf-8

"""
    Program Administration API

    The Transaction Controls Program Administration API enables Issuers to change program configurations for their sponsorID.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ManageRuleConfigurationputPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, rule_categories=None, card_enrollment_callback_settings=None, is_spend_limit_allowed=None, is_filter_by_country_allowed=None):
        """
        ManageRuleConfigurationputPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'rule_categories': 'str',
            'card_enrollment_callback_settings': 'CardEnrollmentCallbackSettings',
            'is_spend_limit_allowed': 'bool',
            'is_filter_by_country_allowed': 'bool'
        }

        self.attribute_map = {
            'rule_categories': 'ruleCategories',
            'card_enrollment_callback_settings': 'cardEnrollmentCallbackSettings',
            'is_spend_limit_allowed': 'isSpendLimitAllowed',
            'is_filter_by_country_allowed': 'isFilterByCountryAllowed'
        }

        self._rule_categories = rule_categories
        self._card_enrollment_callback_settings = card_enrollment_callback_settings
        self._is_spend_limit_allowed = is_spend_limit_allowed
        self._is_filter_by_country_allowed = is_filter_by_country_allowed

    @property
    def rule_categories(self):
        """
        Gets the rule_categories of this ManageRuleConfigurationputPayload.
        Allowed Rule categories configured for this Sponsor ID

        :return: The rule_categories of this ManageRuleConfigurationputPayload.
        :rtype: str
        """
        return self._rule_categories

    @rule_categories.setter
    def rule_categories(self, rule_categories):
        """
        Sets the rule_categories of this ManageRuleConfigurationputPayload.
        Allowed Rule categories configured for this Sponsor ID

        :param rule_categories: The rule_categories of this ManageRuleConfigurationputPayload.
        :type: str
        """
        if rule_categories is None:
            raise ValueError("Invalid value for `rule_categories`, must not be `None`")

        self._rule_categories = rule_categories

    @property
    def card_enrollment_callback_settings(self):
        """
        Gets the card_enrollment_callback_settings of this ManageRuleConfigurationputPayload.

        :return: The card_enrollment_callback_settings of this ManageRuleConfigurationputPayload.
        :rtype: CardEnrollmentCallbackSettings
        """
        return self._card_enrollment_callback_settings

    @card_enrollment_callback_settings.setter
    def card_enrollment_callback_settings(self, card_enrollment_callback_settings):
        """
        Sets the card_enrollment_callback_settings of this ManageRuleConfigurationputPayload.

        :param card_enrollment_callback_settings: The card_enrollment_callback_settings of this ManageRuleConfigurationputPayload.
        :type: CardEnrollmentCallbackSettings
        """

        self._card_enrollment_callback_settings = card_enrollment_callback_settings

    @property
    def is_spend_limit_allowed(self):
        """
        Gets the is_spend_limit_allowed of this ManageRuleConfigurationputPayload.
        isSpendLimitAllowed is dependent on the sponsor whether it allows setting up spend limit control or not

        :return: The is_spend_limit_allowed of this ManageRuleConfigurationputPayload.
        :rtype: bool
        """
        return self._is_spend_limit_allowed

    @is_spend_limit_allowed.setter
    def is_spend_limit_allowed(self, is_spend_limit_allowed):
        """
        Sets the is_spend_limit_allowed of this ManageRuleConfigurationputPayload.
        isSpendLimitAllowed is dependent on the sponsor whether it allows setting up spend limit control or not

        :param is_spend_limit_allowed: The is_spend_limit_allowed of this ManageRuleConfigurationputPayload.
        :type: bool
        """

        self._is_spend_limit_allowed = is_spend_limit_allowed

    @property
    def is_filter_by_country_allowed(self):
        """
        Gets the is_filter_by_country_allowed of this ManageRuleConfigurationputPayload.
        isFilterByCountryAllowed is dependent on the sponsor whether it allows setting up country enable or disabled list

        :return: The is_filter_by_country_allowed of this ManageRuleConfigurationputPayload.
        :rtype: bool
        """
        return self._is_filter_by_country_allowed

    @is_filter_by_country_allowed.setter
    def is_filter_by_country_allowed(self, is_filter_by_country_allowed):
        """
        Sets the is_filter_by_country_allowed of this ManageRuleConfigurationputPayload.
        isFilterByCountryAllowed is dependent on the sponsor whether it allows setting up country enable or disabled list

        :param is_filter_by_country_allowed: The is_filter_by_country_allowed of this ManageRuleConfigurationputPayload.
        :type: bool
        """

        self._is_filter_by_country_allowed = is_filter_by_country_allowed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ManageRuleConfigurationputPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------