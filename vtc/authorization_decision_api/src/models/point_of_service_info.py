# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PointOfServiceInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, personal_identification_number_entry_mode=None, terminal_type=None, primary_account_number_entry_mode=None, security_condition=None, presentation_data=None, terminal_entry_capability=None, terminal_class=None):
        """
        PointOfServiceInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'personal_identification_number_entry_mode': 'str',
            'terminal_type': 'str',
            'primary_account_number_entry_mode': 'str',
            'security_condition': 'str',
            'presentation_data': 'PresentationData',
            'terminal_entry_capability': 'str',
            'terminal_class': 'TerminalClass'
        }

        self.attribute_map = {
            'personal_identification_number_entry_mode': 'personalIdentificationNumberEntryMode',
            'terminal_type': 'terminalType',
            'primary_account_number_entry_mode': 'primaryAccountNumberEntryMode',
            'security_condition': 'securityCondition',
            'presentation_data': 'presentationData',
            'terminal_entry_capability': 'terminalEntryCapability',
            'terminal_class': 'terminalClass'
        }

        self._personal_identification_number_entry_mode = personal_identification_number_entry_mode
        self._terminal_type = terminal_type
        self._primary_account_number_entry_mode = primary_account_number_entry_mode
        self._security_condition = security_condition
        self._presentation_data = presentation_data
        self._terminal_entry_capability = terminal_entry_capability
        self._terminal_class = terminal_class

    @property
    def personal_identification_number_entry_mode(self):
        """
        Gets the personal_identification_number_entry_mode of this PointOfServiceInfo.
        identifies the way the PIN number was entered

        :return: The personal_identification_number_entry_mode of this PointOfServiceInfo.
        :rtype: str
        """
        return self._personal_identification_number_entry_mode

    @personal_identification_number_entry_mode.setter
    def personal_identification_number_entry_mode(self, personal_identification_number_entry_mode):
        """
        Sets the personal_identification_number_entry_mode of this PointOfServiceInfo.
        identifies the way the PIN number was entered

        :param personal_identification_number_entry_mode: The personal_identification_number_entry_mode of this PointOfServiceInfo.
        :type: str
        """

        self._personal_identification_number_entry_mode = personal_identification_number_entry_mode

    @property
    def terminal_type(self):
        """
        Gets the terminal_type of this PointOfServiceInfo.
        identifies the type of terminal at which the transaction was acquired

        :return: The terminal_type of this PointOfServiceInfo.
        :rtype: str
        """
        return self._terminal_type

    @terminal_type.setter
    def terminal_type(self, terminal_type):
        """
        Sets the terminal_type of this PointOfServiceInfo.
        identifies the type of terminal at which the transaction was acquired

        :param terminal_type: The terminal_type of this PointOfServiceInfo.
        :type: str
        """
        if terminal_type is None:
            raise ValueError("Invalid value for `terminal_type`, must not be `None`")

        self._terminal_type = terminal_type

    @property
    def primary_account_number_entry_mode(self):
        """
        Gets the primary_account_number_entry_mode of this PointOfServiceInfo.
        identifies the way  primary account number was entered

        :return: The primary_account_number_entry_mode of this PointOfServiceInfo.
        :rtype: str
        """
        return self._primary_account_number_entry_mode

    @primary_account_number_entry_mode.setter
    def primary_account_number_entry_mode(self, primary_account_number_entry_mode):
        """
        Sets the primary_account_number_entry_mode of this PointOfServiceInfo.
        identifies the way  primary account number was entered

        :param primary_account_number_entry_mode: The primary_account_number_entry_mode of this PointOfServiceInfo.
        :type: str
        """

        self._primary_account_number_entry_mode = primary_account_number_entry_mode

    @property
    def security_condition(self):
        """
        Gets the security_condition of this PointOfServiceInfo.
        identifies information about how the payment transaction was authenticated

        :return: The security_condition of this PointOfServiceInfo.
        :rtype: str
        """
        return self._security_condition

    @security_condition.setter
    def security_condition(self, security_condition):
        """
        Sets the security_condition of this PointOfServiceInfo.
        identifies information about how the payment transaction was authenticated

        :param security_condition: The security_condition of this PointOfServiceInfo.
        :type: str
        """

        self._security_condition = security_condition

    @property
    def presentation_data(self):
        """
        Gets the presentation_data of this PointOfServiceInfo.

        :return: The presentation_data of this PointOfServiceInfo.
        :rtype: PresentationData
        """
        return self._presentation_data

    @presentation_data.setter
    def presentation_data(self, presentation_data):
        """
        Sets the presentation_data of this PointOfServiceInfo.

        :param presentation_data: The presentation_data of this PointOfServiceInfo.
        :type: PresentationData
        """
        if presentation_data is None:
            raise ValueError("Invalid value for `presentation_data`, must not be `None`")

        self._presentation_data = presentation_data

    @property
    def terminal_entry_capability(self):
        """
        Gets the terminal_entry_capability of this PointOfServiceInfo.
        identifies the form the primary account number was acquired

        :return: The terminal_entry_capability of this PointOfServiceInfo.
        :rtype: str
        """
        return self._terminal_entry_capability

    @terminal_entry_capability.setter
    def terminal_entry_capability(self, terminal_entry_capability):
        """
        Sets the terminal_entry_capability of this PointOfServiceInfo.
        identifies the form the primary account number was acquired

        :param terminal_entry_capability: The terminal_entry_capability of this PointOfServiceInfo.
        :type: str
        """
        if terminal_entry_capability is None:
            raise ValueError("Invalid value for `terminal_entry_capability`, must not be `None`")

        self._terminal_entry_capability = terminal_entry_capability

    @property
    def terminal_class(self):
        """
        Gets the terminal_class of this PointOfServiceInfo.

        :return: The terminal_class of this PointOfServiceInfo.
        :rtype: TerminalClass
        """
        return self._terminal_class

    @terminal_class.setter
    def terminal_class(self, terminal_class):
        """
        Sets the terminal_class of this PointOfServiceInfo.

        :param terminal_class: The terminal_class of this PointOfServiceInfo.
        :type: TerminalClass
        """
        if terminal_class is None:
            raise ValueError("Invalid value for `terminal_class`, must not be `None`")

        self._terminal_class = terminal_class

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PointOfServiceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------