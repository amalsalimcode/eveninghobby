# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DecisionRequestActionsputPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cardholder_bill_amount=None, transaction_approved=None, is_decline_result_of_transaction_control=None, decision_type=None, transaction_amount=None):
        """
        DecisionRequestActionsputPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cardholder_bill_amount': 'float',
            'transaction_approved': 'str',
            'is_decline_result_of_transaction_control': 'bool',
            'decision_type': 'str',
            'transaction_amount': 'float'
        }

        self.attribute_map = {
            'cardholder_bill_amount': 'cardholderBillAmount',
            'transaction_approved': 'transactionApproved',
            'is_decline_result_of_transaction_control': 'isDeclineResultOfTransactionControl',
            'decision_type': 'decisionType',
            'transaction_amount': 'transactionAmount'
        }

        self._cardholder_bill_amount = cardholder_bill_amount
        self._transaction_approved = transaction_approved
        self._is_decline_result_of_transaction_control = is_decline_result_of_transaction_control
        self._decision_type = decision_type
        self._transaction_amount = transaction_amount

    @property
    def cardholder_bill_amount(self):
        """
        Gets the cardholder_bill_amount of this DecisionRequestActionsputPayload.
        The total completion amount to be billed to the cardholder inclusive of any fees assessed.  This amount must be in the card issuers currency.  This is an optional field.  If completion amount is not equal to request amount, the spend limit will be updated to reflect the difference.

        :return: The cardholder_bill_amount of this DecisionRequestActionsputPayload.
        :rtype: float
        """
        return self._cardholder_bill_amount

    @cardholder_bill_amount.setter
    def cardholder_bill_amount(self, cardholder_bill_amount):
        """
        Sets the cardholder_bill_amount of this DecisionRequestActionsputPayload.
        The total completion amount to be billed to the cardholder inclusive of any fees assessed.  This amount must be in the card issuers currency.  This is an optional field.  If completion amount is not equal to request amount, the spend limit will be updated to reflect the difference.

        :param cardholder_bill_amount: The cardholder_bill_amount of this DecisionRequestActionsputPayload.
        :type: float
        """

        self._cardholder_bill_amount = cardholder_bill_amount

    @property
    def transaction_approved(self):
        """
        Gets the transaction_approved of this DecisionRequestActionsputPayload.
        The decision for the completed transaction

        :return: The transaction_approved of this DecisionRequestActionsputPayload.
        :rtype: str
        """
        return self._transaction_approved

    @transaction_approved.setter
    def transaction_approved(self, transaction_approved):
        """
        Sets the transaction_approved of this DecisionRequestActionsputPayload.
        The decision for the completed transaction

        :param transaction_approved: The transaction_approved of this DecisionRequestActionsputPayload.
        :type: str
        """
        if transaction_approved is None:
            raise ValueError("Invalid value for `transaction_approved`, must not be `None`")

        self._transaction_approved = transaction_approved

    @property
    def is_decline_result_of_transaction_control(self):
        """
        Gets the is_decline_result_of_transaction_control of this DecisionRequestActionsputPayload.
        Indicates whether the decline decision is the result of the transaction control recommendation.  If not present true will be assumed

        :return: The is_decline_result_of_transaction_control of this DecisionRequestActionsputPayload.
        :rtype: bool
        """
        return self._is_decline_result_of_transaction_control

    @is_decline_result_of_transaction_control.setter
    def is_decline_result_of_transaction_control(self, is_decline_result_of_transaction_control):
        """
        Sets the is_decline_result_of_transaction_control of this DecisionRequestActionsputPayload.
        Indicates whether the decline decision is the result of the transaction control recommendation.  If not present true will be assumed

        :param is_decline_result_of_transaction_control: The is_decline_result_of_transaction_control of this DecisionRequestActionsputPayload.
        :type: bool
        """

        self._is_decline_result_of_transaction_control = is_decline_result_of_transaction_control

    @property
    def decision_type(self):
        """
        Gets the decision_type of this DecisionRequestActionsputPayload.
        The decision request type

        :return: The decision_type of this DecisionRequestActionsputPayload.
        :rtype: str
        """
        return self._decision_type

    @decision_type.setter
    def decision_type(self, decision_type):
        """
        Sets the decision_type of this DecisionRequestActionsputPayload.
        The decision request type

        :param decision_type: The decision_type of this DecisionRequestActionsputPayload.
        :type: str
        """
        if decision_type is None:
            raise ValueError("Invalid value for `decision_type`, must not be `None`")

        self._decision_type = decision_type

    @property
    def transaction_amount(self):
        """
        Gets the transaction_amount of this DecisionRequestActionsputPayload.
        The total transaction amount in local merchant currency.

        :return: The transaction_amount of this DecisionRequestActionsputPayload.
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """
        Sets the transaction_amount of this DecisionRequestActionsputPayload.
        The total transaction amount in local merchant currency.

        :param transaction_amount: The transaction_amount of this DecisionRequestActionsputPayload.
        :type: float
        """

        self._transaction_amount = transaction_amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DecisionRequestActionsputPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------