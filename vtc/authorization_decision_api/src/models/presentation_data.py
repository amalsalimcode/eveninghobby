# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PresentationData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, how_presented=None, is_card_present=None):
        """
        PresentationData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'how_presented': 'str',
            'is_card_present': 'bool'
        }

        self.attribute_map = {
            'how_presented': 'howPresented',
            'is_card_present': 'isCardPresent'
        }

        self._how_presented = how_presented
        self._is_card_present = is_card_present

    @property
    def how_presented(self):
        """
        Gets the how_presented of this PresentationData.
        Identifies how the transaction entered the payment system

        :return: The how_presented of this PresentationData.
        :rtype: str
        """
        return self._how_presented

    @how_presented.setter
    def how_presented(self, how_presented):
        """
        Sets the how_presented of this PresentationData.
        Identifies how the transaction entered the payment system

        :param how_presented: The how_presented of this PresentationData.
        :type: str
        """
        if how_presented is None:
            raise ValueError("Invalid value for `how_presented`, must not be `None`")

        self._how_presented = how_presented

    @property
    def is_card_present(self):
        """
        Gets the is_card_present of this PresentationData.
        Identifies whether the card was present at the merchant location when the transaction entered the payment system

        :return: The is_card_present of this PresentationData.
        :rtype: bool
        """
        return self._is_card_present

    @is_card_present.setter
    def is_card_present(self, is_card_present):
        """
        Sets the is_card_present of this PresentationData.
        Identifies whether the card was present at the merchant location when the transaction entered the payment system

        :param is_card_present: The is_card_present of this PresentationData.
        :type: bool
        """
        if is_card_present is None:
            raise ValueError("Invalid value for `is_card_present`, must not be `None`")

        self._is_card_present = is_card_present

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PresentationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------