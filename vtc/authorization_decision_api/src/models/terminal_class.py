# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TerminalClass(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, how_operated=None, device_location=None, is_attended=None):
        """
        TerminalClass - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'how_operated': 'str',
            'device_location': 'str',
            'is_attended': 'bool'
        }

        self.attribute_map = {
            'how_operated': 'howOperated',
            'device_location': 'deviceLocation',
            'is_attended': 'isAttended'
        }

        self._how_operated = how_operated
        self._device_location = device_location
        self._is_attended = is_attended

    @property
    def how_operated(self):
        """
        Gets the how_operated of this TerminalClass.
        Defines how the card accepting device was operated

        :return: The how_operated of this TerminalClass.
        :rtype: str
        """
        return self._how_operated

    @how_operated.setter
    def how_operated(self, how_operated):
        """
        Sets the how_operated of this TerminalClass.
        Defines how the card accepting device was operated

        :param how_operated: The how_operated of this TerminalClass.
        :type: str
        """
        if how_operated is None:
            raise ValueError("Invalid value for `how_operated`, must not be `None`")

        self._how_operated = how_operated

    @property
    def device_location(self):
        """
        Gets the device_location of this TerminalClass.
        Defines the location of the card accepting device 

        :return: The device_location of this TerminalClass.
        :rtype: str
        """
        return self._device_location

    @device_location.setter
    def device_location(self, device_location):
        """
        Sets the device_location of this TerminalClass.
        Defines the location of the card accepting device 

        :param device_location: The device_location of this TerminalClass.
        :type: str
        """
        if device_location is None:
            raise ValueError("Invalid value for `device_location`, must not be `None`")

        self._device_location = device_location

    @property
    def is_attended(self):
        """
        Gets the is_attended of this TerminalClass.
        Defines whether card accepting device is attended by a person

        :return: The is_attended of this TerminalClass.
        :rtype: bool
        """
        return self._is_attended

    @is_attended.setter
    def is_attended(self, is_attended):
        """
        Sets the is_attended of this TerminalClass.
        Defines whether card accepting device is attended by a person

        :param is_attended: The is_attended of this TerminalClass.
        :type: bool
        """
        if is_attended is None:
            raise ValueError("Invalid value for `is_attended`, must not be `None`")

        self._is_attended = is_attended

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TerminalClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------