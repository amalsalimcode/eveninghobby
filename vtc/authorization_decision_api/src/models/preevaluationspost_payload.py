# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PreevaluationspostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, processing_code=None, bank_account_number=None, retrieval_reference_number=None, message_type=None, was_processor_declined=None, primary_account_number=None, card_detail=None, merchant_info=None, payment_token=None, point_of_service_info=None, transaction_id=None, cardholder_bill_amount=None, decision_type=None, date_time_local=None):
        """
        PreevaluationspostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'processing_code': 'str',
            'bank_account_number': 'str',
            'retrieval_reference_number': 'str',
            'message_type': 'str',
            'was_processor_declined': 'bool',
            'primary_account_number': 'str',
            'card_detail': 'CardDetail',
            'merchant_info': 'MerchantInfo',
            'payment_token': 'PaymentToken',
            'point_of_service_info': 'PointOfServiceInfo',
            'transaction_id': 'str',
            'cardholder_bill_amount': 'float',
            'decision_type': 'str',
            'date_time_local': 'str'
        }

        self.attribute_map = {
            'processing_code': 'processingCode',
            'bank_account_number': 'bankAccountNumber',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'message_type': 'messageType',
            'was_processor_declined': 'wasProcessorDeclined',
            'primary_account_number': 'primaryAccountNumber',
            'card_detail': 'cardDetail',
            'merchant_info': 'merchantInfo',
            'payment_token': 'paymentToken',
            'point_of_service_info': 'pointOfServiceInfo',
            'transaction_id': 'transactionID',
            'cardholder_bill_amount': 'cardholderBillAmount',
            'decision_type': 'decisionType',
            'date_time_local': 'dateTimeLocal'
        }

        self._processing_code = processing_code
        self._bank_account_number = bank_account_number
        self._retrieval_reference_number = retrieval_reference_number
        self._message_type = message_type
        self._was_processor_declined = was_processor_declined
        self._primary_account_number = primary_account_number
        self._card_detail = card_detail
        self._merchant_info = merchant_info
        self._payment_token = payment_token
        self._point_of_service_info = point_of_service_info
        self._transaction_id = transaction_id
        self._cardholder_bill_amount = cardholder_bill_amount
        self._decision_type = decision_type
        self._date_time_local = date_time_local

    @property
    def processing_code(self):
        """
        Gets the processing_code of this PreevaluationspostPayload.
        ISO processing code must be numeric, must be 6 positions

        :return: The processing_code of this PreevaluationspostPayload.
        :rtype: str
        """
        return self._processing_code

    @processing_code.setter
    def processing_code(self, processing_code):
        """
        Sets the processing_code of this PreevaluationspostPayload.
        ISO processing code must be numeric, must be 6 positions

        :param processing_code: The processing_code of this PreevaluationspostPayload.
        :type: str
        """
        if processing_code is None:
            raise ValueError("Invalid value for `processing_code`, must not be `None`")

        self._processing_code = processing_code

    @property
    def bank_account_number(self):
        """
        Gets the bank_account_number of this PreevaluationspostPayload.
        The bank acocunt number for which the decision is to be made, must be between 16 and 19 numeric digits

        :return: The bank_account_number of this PreevaluationspostPayload.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """
        Sets the bank_account_number of this PreevaluationspostPayload.
        The bank acocunt number for which the decision is to be made, must be between 16 and 19 numeric digits

        :param bank_account_number: The bank_account_number of this PreevaluationspostPayload.
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this PreevaluationspostPayload.
        The retrieval reference number assigned by the card acceptor, must be at least 1 character alphanumeric

        :return: The retrieval_reference_number of this PreevaluationspostPayload.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this PreevaluationspostPayload.
        The retrieval reference number assigned by the card acceptor, must be at least 1 character alphanumeric

        :param retrieval_reference_number: The retrieval_reference_number of this PreevaluationspostPayload.
        :type: str
        """
        if retrieval_reference_number is None:
            raise ValueError("Invalid value for `retrieval_reference_number`, must not be `None`")

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def message_type(self):
        """
        Gets the message_type of this PreevaluationspostPayload.
        ISO message type

        :return: The message_type of this PreevaluationspostPayload.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """
        Sets the message_type of this PreevaluationspostPayload.
        ISO message type

        :param message_type: The message_type of this PreevaluationspostPayload.
        :type: str
        """
        if message_type is None:
            raise ValueError("Invalid value for `message_type`, must not be `None`")

        self._message_type = message_type

    @property
    def was_processor_declined(self):
        """
        Gets the was_processor_declined of this PreevaluationspostPayload.
        Provided along with decision type INFORM to indicate if the transaction was declined or approved .

        :return: The was_processor_declined of this PreevaluationspostPayload.
        :rtype: bool
        """
        return self._was_processor_declined

    @was_processor_declined.setter
    def was_processor_declined(self, was_processor_declined):
        """
        Sets the was_processor_declined of this PreevaluationspostPayload.
        Provided along with decision type INFORM to indicate if the transaction was declined or approved .

        :param was_processor_declined: The was_processor_declined of this PreevaluationspostPayload.
        :type: bool
        """

        self._was_processor_declined = was_processor_declined

    @property
    def primary_account_number(self):
        """
        Gets the primary_account_number of this PreevaluationspostPayload.
        The card number for which the decision is to be made, must be between 16 and 19 numeric digits

        :return: The primary_account_number of this PreevaluationspostPayload.
        :rtype: str
        """
        return self._primary_account_number

    @primary_account_number.setter
    def primary_account_number(self, primary_account_number):
        """
        Sets the primary_account_number of this PreevaluationspostPayload.
        The card number for which the decision is to be made, must be between 16 and 19 numeric digits

        :param primary_account_number: The primary_account_number of this PreevaluationspostPayload.
        :type: str
        """
        if primary_account_number is None:
            raise ValueError("Invalid value for `primary_account_number`, must not be `None`")

        self._primary_account_number = primary_account_number

    @property
    def card_detail(self):
        """
        Gets the card_detail of this PreevaluationspostPayload.

        :return: The card_detail of this PreevaluationspostPayload.
        :rtype: CardDetail
        """
        return self._card_detail

    @card_detail.setter
    def card_detail(self, card_detail):
        """
        Sets the card_detail of this PreevaluationspostPayload.

        :param card_detail: The card_detail of this PreevaluationspostPayload.
        :type: CardDetail
        """

        self._card_detail = card_detail

    @property
    def merchant_info(self):
        """
        Gets the merchant_info of this PreevaluationspostPayload.

        :return: The merchant_info of this PreevaluationspostPayload.
        :rtype: MerchantInfo
        """
        return self._merchant_info

    @merchant_info.setter
    def merchant_info(self, merchant_info):
        """
        Sets the merchant_info of this PreevaluationspostPayload.

        :param merchant_info: The merchant_info of this PreevaluationspostPayload.
        :type: MerchantInfo
        """
        if merchant_info is None:
            raise ValueError("Invalid value for `merchant_info`, must not be `None`")

        self._merchant_info = merchant_info

    @property
    def payment_token(self):
        """
        Gets the payment_token of this PreevaluationspostPayload.

        :return: The payment_token of this PreevaluationspostPayload.
        :rtype: PaymentToken
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """
        Sets the payment_token of this PreevaluationspostPayload.

        :param payment_token: The payment_token of this PreevaluationspostPayload.
        :type: PaymentToken
        """

        self._payment_token = payment_token

    @property
    def point_of_service_info(self):
        """
        Gets the point_of_service_info of this PreevaluationspostPayload.

        :return: The point_of_service_info of this PreevaluationspostPayload.
        :rtype: PointOfServiceInfo
        """
        return self._point_of_service_info

    @point_of_service_info.setter
    def point_of_service_info(self, point_of_service_info):
        """
        Sets the point_of_service_info of this PreevaluationspostPayload.

        :param point_of_service_info: The point_of_service_info of this PreevaluationspostPayload.
        :type: PointOfServiceInfo
        """
        if point_of_service_info is None:
            raise ValueError("Invalid value for `point_of_service_info`, must not be `None`")

        self._point_of_service_info = point_of_service_info

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this PreevaluationspostPayload.
        The unique transaction ID assigned by processing gateway. In case of NON visa processed transaction, this will be a Unique tranID from Issuer system.

        :return: The transaction_id of this PreevaluationspostPayload.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this PreevaluationspostPayload.
        The unique transaction ID assigned by processing gateway. In case of NON visa processed transaction, this will be a Unique tranID from Issuer system.

        :param transaction_id: The transaction_id of this PreevaluationspostPayload.
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def cardholder_bill_amount(self):
        """
        Gets the cardholder_bill_amount of this PreevaluationspostPayload.
        The total amount to be billed to the cardholder inclusive of any fees assessed.  This amount must be in the card issuers currency.

        :return: The cardholder_bill_amount of this PreevaluationspostPayload.
        :rtype: float
        """
        return self._cardholder_bill_amount

    @cardholder_bill_amount.setter
    def cardholder_bill_amount(self, cardholder_bill_amount):
        """
        Sets the cardholder_bill_amount of this PreevaluationspostPayload.
        The total amount to be billed to the cardholder inclusive of any fees assessed.  This amount must be in the card issuers currency.

        :param cardholder_bill_amount: The cardholder_bill_amount of this PreevaluationspostPayload.
        :type: float
        """
        if cardholder_bill_amount is None:
            raise ValueError("Invalid value for `cardholder_bill_amount`, must not be `None`")

        self._cardholder_bill_amount = cardholder_bill_amount

    @property
    def decision_type(self):
        """
        Gets the decision_type of this PreevaluationspostPayload.
        The decision request type.

        :return: The decision_type of this PreevaluationspostPayload.
        :rtype: str
        """
        return self._decision_type

    @decision_type.setter
    def decision_type(self, decision_type):
        """
        Sets the decision_type of this PreevaluationspostPayload.
        The decision request type.

        :param decision_type: The decision_type of this PreevaluationspostPayload.
        :type: str
        """
        if decision_type is None:
            raise ValueError("Invalid value for `decision_type`, must not be `None`")

        self._decision_type = decision_type

    @property
    def date_time_local(self):
        """
        Gets the date_time_local of this PreevaluationspostPayload.
        The date and time the transaction originated in the format: mmddhhmms

        :return: The date_time_local of this PreevaluationspostPayload.
        :rtype: str
        """
        return self._date_time_local

    @date_time_local.setter
    def date_time_local(self, date_time_local):
        """
        Sets the date_time_local of this PreevaluationspostPayload.
        The date and time the transaction originated in the format: mmddhhmms

        :param date_time_local: The date_time_local of this PreevaluationspostPayload.
        :type: str
        """
        if date_time_local is None:
            raise ValueError("Invalid value for `date_time_local`, must not be `None`")

        self._date_time_local = date_time_local

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PreevaluationspostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------