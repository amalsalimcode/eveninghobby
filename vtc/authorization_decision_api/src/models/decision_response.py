# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DecisionResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, should_decline=None, decline_threshold_amount=None, decision_response_time_stamp=None, response_message=None, decline_rule_category=None, decline_rule_type=None):
        """
        DecisionResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'should_decline': 'bool',
            'decline_threshold_amount': 'float',
            'decision_response_time_stamp': 'str',
            'response_message': 'str',
            'decline_rule_category': 'str',
            'decline_rule_type': 'str'
        }

        self.attribute_map = {
            'should_decline': 'shouldDecline',
            'decline_threshold_amount': 'declineThresholdAmount',
            'decision_response_time_stamp': 'decisionResponseTimeStamp',
            'response_message': 'responseMessage',
            'decline_rule_category': 'declineRuleCategory',
            'decline_rule_type': 'declineRuleType'
        }

        self._should_decline = should_decline
        self._decline_threshold_amount = decline_threshold_amount
        self._decision_response_time_stamp = decision_response_time_stamp
        self._response_message = response_message
        self._decline_rule_category = decline_rule_category
        self._decline_rule_type = decline_rule_type

    @property
    def should_decline(self):
        """
        Gets the should_decline of this DecisionResponse.
        Indicates the decline decision/recommendation depending on decision type

        :return: The should_decline of this DecisionResponse.
        :rtype: bool
        """
        return self._should_decline

    @should_decline.setter
    def should_decline(self, should_decline):
        """
        Sets the should_decline of this DecisionResponse.
        Indicates the decline decision/recommendation depending on decision type

        :param should_decline: The should_decline of this DecisionResponse.
        :type: bool
        """
        if should_decline is None:
            raise ValueError("Invalid value for `should_decline`, must not be `None`")

        self._should_decline = should_decline

    @property
    def decline_threshold_amount(self):
        """
        Gets the decline_threshold_amount of this DecisionResponse.
        indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.

        :return: The decline_threshold_amount of this DecisionResponse.
        :rtype: float
        """
        return self._decline_threshold_amount

    @decline_threshold_amount.setter
    def decline_threshold_amount(self, decline_threshold_amount):
        """
        Sets the decline_threshold_amount of this DecisionResponse.
        indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.

        :param decline_threshold_amount: The decline_threshold_amount of this DecisionResponse.
        :type: float
        """

        self._decline_threshold_amount = decline_threshold_amount

    @property
    def decision_response_time_stamp(self):
        """
        Gets the decision_response_time_stamp of this DecisionResponse.
        This value will be set automatically when the decision response is sent.  Value is in GMT time

        :return: The decision_response_time_stamp of this DecisionResponse.
        :rtype: str
        """
        return self._decision_response_time_stamp

    @decision_response_time_stamp.setter
    def decision_response_time_stamp(self, decision_response_time_stamp):
        """
        Sets the decision_response_time_stamp of this DecisionResponse.
        This value will be set automatically when the decision response is sent.  Value is in GMT time

        :param decision_response_time_stamp: The decision_response_time_stamp of this DecisionResponse.
        :type: str
        """
        if decision_response_time_stamp is None:
            raise ValueError("Invalid value for `decision_response_time_stamp`, must not be `None`")

        self._decision_response_time_stamp = decision_response_time_stamp

    @property
    def response_message(self):
        """
        Gets the response_message of this DecisionResponse.
        This field provides more information on the disposition of the response

        :return: The response_message of this DecisionResponse.
        :rtype: str
        """
        return self._response_message

    @response_message.setter
    def response_message(self, response_message):
        """
        Sets the response_message of this DecisionResponse.
        This field provides more information on the disposition of the response

        :param response_message: The response_message of this DecisionResponse.
        :type: str
        """
        if response_message is None:
            raise ValueError("Invalid value for `response_message`, must not be `None`")

        self._response_message = response_message

    @property
    def decline_rule_category(self):
        """
        Gets the decline_rule_category of this DecisionResponse.
        indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true

        :return: The decline_rule_category of this DecisionResponse.
        :rtype: str
        """
        return self._decline_rule_category

    @decline_rule_category.setter
    def decline_rule_category(self, decline_rule_category):
        """
        Sets the decline_rule_category of this DecisionResponse.
        indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true

        :param decline_rule_category: The decline_rule_category of this DecisionResponse.
        :type: str
        """

        self._decline_rule_category = decline_rule_category

    @property
    def decline_rule_type(self):
        """
        Gets the decline_rule_type of this DecisionResponse.
        indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true

        :return: The decline_rule_type of this DecisionResponse.
        :rtype: str
        """
        return self._decline_rule_type

    @decline_rule_type.setter
    def decline_rule_type(self, decline_rule_type):
        """
        Sets the decline_rule_type of this DecisionResponse.
        indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true

        :param decline_rule_type: The decline_rule_type of this DecisionResponse.
        :type: str
        """

        self._decline_rule_type = decline_rule_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DecisionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------