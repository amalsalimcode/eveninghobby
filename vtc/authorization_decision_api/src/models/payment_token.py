# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PaymentToken(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, assurance_level=None, value=None, requestor_id=None, expiration_date=None, token_type=None):
        """
        PaymentToken - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'assurance_level': 'str',
            'value': 'str',
            'requestor_id': 'str',
            'expiration_date': 'str',
            'token_type': 'str'
        }

        self.attribute_map = {
            'assurance_level': 'assuranceLevel',
            'value': 'value',
            'requestor_id': 'requestorID',
            'expiration_date': 'expirationDate',
            'token_type': 'tokenType'
        }

        self._assurance_level = assurance_level
        self._value = value
        self._requestor_id = requestor_id
        self._expiration_date = expiration_date
        self._token_type = token_type

    @property
    def assurance_level(self):
        """
        Gets the assurance_level of this PaymentToken.
        The value that indicates the confidence level of the token to PAN/cardholder binding Maximum of 2 digits.

        :return: The assurance_level of this PaymentToken.
        :rtype: str
        """
        return self._assurance_level

    @assurance_level.setter
    def assurance_level(self, assurance_level):
        """
        Sets the assurance_level of this PaymentToken.
        The value that indicates the confidence level of the token to PAN/cardholder binding Maximum of 2 digits.

        :param assurance_level: The assurance_level of this PaymentToken.
        :type: str
        """

        self._assurance_level = assurance_level

    @property
    def value(self):
        """
        Gets the value of this PaymentToken.
        The token number for which the decision is to be made, must be between 13 and 19 numeric digits.

        :return: The value of this PaymentToken.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this PaymentToken.
        The token number for which the decision is to be made, must be between 13 and 19 numeric digits.

        :param value: The value of this PaymentToken.
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def requestor_id(self):
        """
        Gets the requestor_id of this PaymentToken.
        The requestor id associated to the token.

        :return: The requestor_id of this PaymentToken.
        :rtype: str
        """
        return self._requestor_id

    @requestor_id.setter
    def requestor_id(self, requestor_id):
        """
        Sets the requestor_id of this PaymentToken.
        The requestor id associated to the token.

        :param requestor_id: The requestor_id of this PaymentToken.
        :type: str
        """

        self._requestor_id = requestor_id

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this PaymentToken.
        The token expiration date in yyyymm format. Maximum of 6 characters

        :return: The expiration_date of this PaymentToken.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this PaymentToken.
        The token expiration date in yyyymm format. Maximum of 6 characters

        :param expiration_date: The expiration_date of this PaymentToken.
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def token_type(self):
        """
        Gets the token_type of this PaymentToken.
        The type of the token. Valid values are: 01, 02, 03, 04, 05, 06

        :return: The token_type of this PaymentToken.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """
        Sets the token_type of this PaymentToken.
        The type of the token. Valid values are: 01, 02, 03, 04, 05, 06

        :param token_type: The token_type of this PaymentToken.
        :type: str
        """

        self._token_type = token_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PaymentToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------