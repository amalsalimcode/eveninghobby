# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MerchantInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, city=None, merchant_category_code=None, name=None, country_code=None, currency_code=None, transaction_amount=None, card_acceptor_terminal_id=None, address_lines=None, postal_code=None, region=None):
        """
        MerchantInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'city': 'str',
            'merchant_category_code': 'str',
            'name': 'str',
            'country_code': 'str',
            'currency_code': 'str',
            'transaction_amount': 'float',
            'card_acceptor_terminal_id': 'str',
            'address_lines': 'str',
            'postal_code': 'str',
            'region': 'str'
        }

        self.attribute_map = {
            'city': 'city',
            'merchant_category_code': 'merchantCategoryCode',
            'name': 'name',
            'country_code': 'countryCode',
            'currency_code': 'currencyCode',
            'transaction_amount': 'transactionAmount',
            'card_acceptor_terminal_id': 'cardAcceptorTerminalID',
            'address_lines': 'addressLines',
            'postal_code': 'postalCode',
            'region': 'region'
        }

        self._city = city
        self._merchant_category_code = merchant_category_code
        self._name = name
        self._country_code = country_code
        self._currency_code = currency_code
        self._transaction_amount = transaction_amount
        self._card_acceptor_terminal_id = card_acceptor_terminal_id
        self._address_lines = address_lines
        self._postal_code = postal_code
        self._region = region

    @property
    def city(self):
        """
        Gets the city of this MerchantInfo.
        The city for which the merchant is located.

        :return: The city of this MerchantInfo.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this MerchantInfo.
        The city for which the merchant is located.

        :param city: The city of this MerchantInfo.
        :type: str
        """

        self._city = city

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this MerchantInfo.
        ISO 8583 four-digit merchant classification code that identifies the merchant by their business line.

        :return: The merchant_category_code of this MerchantInfo.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this MerchantInfo.
        ISO 8583 four-digit merchant classification code that identifies the merchant by their business line.

        :param merchant_category_code: The merchant_category_code of this MerchantInfo.
        :type: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def name(self):
        """
        Gets the name of this MerchantInfo.
        The name of the merchant’s business.

        :return: The name of this MerchantInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MerchantInfo.
        The name of the merchant’s business.

        :param name: The name of this MerchantInfo.
        :type: str
        """

        self._name = name

    @property
    def country_code(self):
        """
        Gets the country_code of this MerchantInfo.
        Three letter country code at Metchant location.

        :return: The country_code of this MerchantInfo.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this MerchantInfo.
        Three letter country code at Metchant location.

        :param country_code: The country_code of this MerchantInfo.
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def currency_code(self):
        """
        Gets the currency_code of this MerchantInfo.
        ISO 8583 three-digit currency classification code that identifies the national currency used at the merchant location.

        :return: The currency_code of this MerchantInfo.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this MerchantInfo.
        ISO 8583 three-digit currency classification code that identifies the national currency used at the merchant location.

        :param currency_code: The currency_code of this MerchantInfo.
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def transaction_amount(self):
        """
        Gets the transaction_amount of this MerchantInfo.
        The total transaction amount in local merchant currency.

        :return: The transaction_amount of this MerchantInfo.
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """
        Sets the transaction_amount of this MerchantInfo.
        The total transaction amount in local merchant currency.

        :param transaction_amount: The transaction_amount of this MerchantInfo.
        :type: float
        """

        self._transaction_amount = transaction_amount

    @property
    def card_acceptor_terminal_id(self):
        """
        Gets the card_acceptor_terminal_id of this MerchantInfo.
        The terminal ID of the card acceptor

        :return: The card_acceptor_terminal_id of this MerchantInfo.
        :rtype: str
        """
        return self._card_acceptor_terminal_id

    @card_acceptor_terminal_id.setter
    def card_acceptor_terminal_id(self, card_acceptor_terminal_id):
        """
        Sets the card_acceptor_terminal_id of this MerchantInfo.
        The terminal ID of the card acceptor

        :param card_acceptor_terminal_id: The card_acceptor_terminal_id of this MerchantInfo.
        :type: str
        """

        self._card_acceptor_terminal_id = card_acceptor_terminal_id

    @property
    def address_lines(self):
        """
        Gets the address_lines of this MerchantInfo.
        Address of the merchant

        :return: The address_lines of this MerchantInfo.
        :rtype: str
        """
        return self._address_lines

    @address_lines.setter
    def address_lines(self, address_lines):
        """
        Sets the address_lines of this MerchantInfo.
        Address of the merchant

        :param address_lines: The address_lines of this MerchantInfo.
        :type: str
        """

        self._address_lines = address_lines

    @property
    def postal_code(self):
        """
        Gets the postal_code of this MerchantInfo.
        The five to nine digit postal (or zip) code for the merchant.

        :return: The postal_code of this MerchantInfo.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this MerchantInfo.
        The five to nine digit postal (or zip) code for the merchant.

        :param postal_code: The postal_code of this MerchantInfo.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """
        Gets the region of this MerchantInfo.
        The two or three letter state or region code. 

        :return: The region of this MerchantInfo.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this MerchantInfo.
        The two or three letter state or region code. 

        :param region: The region of this MerchantInfo.
        :type: str
        """

        self._region = region

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MerchantInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------