# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re
import json

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AuthorizationDecisionApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()

        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def getdecision_request_actions(self, decision_id, **kwargs):
        """
        Retrieve the details of a specific decision record
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getdecision_request_actions(decision_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str decision_id: The ID of the document for the document to be returned (required)
        :return: DecisionRequestActionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getdecision_request_actions_with_http_info(decision_id, **kwargs)
        else:
            (data) = self.getdecision_request_actions_with_http_info(decision_id, **kwargs)
            return data

    def getdecision_request_actions_with_http_info(self, decision_id, **kwargs):
        """
        Retrieve the details of a specific decision record
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getdecision_request_actions_with_http_info(decision_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str decision_id: The ID of the document for the document to be returned (required)
        :return: DecisionRequestActionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['decision_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getdecision_request_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'decision_id' is set
        if ('decision_id' not in params) or (params['decision_id'] is None):
            raise ValueError("Missing the required parameter `decision_id` when calling `getdecision_request_actions`")


        collection_formats = {}

        path = '/vctc/validation/v1/decisions/{decisionID}'.replace('{format}', 'json')
        resource_path = 'decisions/{decisionID}'
        path_params = {}
        if 'decision_id' in params:
            path_params['decisionID'] = params['decision_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DecisionRequestActionsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getdecisions_history(self, page, limit, **kwargs):
        """
        Retrieve a list of decision records for a sponsor
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getdecisions_history(page, limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str page: Page number to be returned (required)
        :param str limit: Page size to be returned (required)
        :return: DecisionsHistorygetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getdecisions_history_with_http_info(page, limit, **kwargs)
        else:
            (data) = self.getdecisions_history_with_http_info(page, limit, **kwargs)
            return data

    def getdecisions_history_with_http_info(self, page, limit, **kwargs):
        """
        Retrieve a list of decision records for a sponsor
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getdecisions_history_with_http_info(page, limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str page: Page number to be returned (required)
        :param str limit: Page size to be returned (required)
        :return: DecisionsHistorygetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getdecisions_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `getdecisions_history`")
        # verify the required parameter 'limit' is set
        if ('limit' not in params) or (params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `getdecisions_history`")


        collection_formats = {}

        path = '/vctc/validation/v1/decisions/history'.replace('{format}', 'json')
        resource_path = 'decisions/history'
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DecisionsHistorygetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postdecision_inquiry(self, decision_inquirypost_payload, **kwargs):
        """
        Retrieve a list of decision records by reterivalReferenceNumber
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postdecision_inquiry(decision_inquirypost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DecisionInquirypostPayload decision_inquirypost_payload: decisionRequest (required)
        :return: DecisionInquirypostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postdecision_inquiry_with_http_info(decision_inquirypost_payload, **kwargs)
        else:
            (data) = self.postdecision_inquiry_with_http_info(decision_inquirypost_payload, **kwargs)
            return data

    def postdecision_inquiry_with_http_info(self, decision_inquirypost_payload, **kwargs):
        """
        Retrieve a list of decision records by reterivalReferenceNumber
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postdecision_inquiry_with_http_info(decision_inquirypost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DecisionInquirypostPayload decision_inquirypost_payload: decisionRequest (required)
        :return: DecisionInquirypostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['decision_inquirypost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postdecision_inquiry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'decision_inquirypost_payload' is set
        if ('decision_inquirypost_payload' not in params) or (params['decision_inquirypost_payload'] is None):
            raise ValueError("Missing the required parameter `decision_inquirypost_payload` when calling `postdecision_inquiry`")


        collection_formats = {}

        path = '/vctc/validation/v1/consumertransactioncontrols/decisioninquiry'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/decisioninquiry'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'decision_inquirypost_payload' in params:
            body_params = params['decision_inquirypost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DecisionInquirypostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postdecision_request(self, decision_requestpost_payload, **kwargs):
        """
        Request a decision on pending transaction or send notification or advice for completed transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postdecision_request(decision_requestpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DecisionRequestpostPayload decision_requestpost_payload: decisionRequest (required)
        :return: DecisionRequestpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postdecision_request_with_http_info(decision_requestpost_payload, **kwargs)
        else:
            (data) = self.postdecision_request_with_http_info(decision_requestpost_payload, **kwargs)
            return data

    def postdecision_request_with_http_info(self, decision_requestpost_payload, **kwargs):
        """
        Request a decision on pending transaction or send notification or advice for completed transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postdecision_request_with_http_info(decision_requestpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DecisionRequestpostPayload decision_requestpost_payload: decisionRequest (required)
        :return: DecisionRequestpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['decision_requestpost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postdecision_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'decision_requestpost_payload' is set
        if ('decision_requestpost_payload' not in params) or (params['decision_requestpost_payload'] is None):
            raise ValueError("Missing the required parameter `decision_requestpost_payload` when calling `postdecision_request`")


        collection_formats = {}

        path = '/vctc/validation/v1/decisions'.replace('{format}', 'json')
        resource_path = 'decisions'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'decision_requestpost_payload' in params:
            body_params = params['decision_requestpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DecisionRequestpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postdecision_request_by_pan(self, decision_request_by_panpost_payload, **kwargs):
        """
        Retrieve a list of decision records for a card
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postdecision_request_by_pan(decision_request_by_panpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DecisionRequestByPanpostPayload decision_request_by_panpost_payload: decisionHistoryRequest (required)
        :return: DecisionRequestByPanpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postdecision_request_by_pan_with_http_info(decision_request_by_panpost_payload, **kwargs)
        else:
            (data) = self.postdecision_request_by_pan_with_http_info(decision_request_by_panpost_payload, **kwargs)
            return data

    def postdecision_request_by_pan_with_http_info(self, decision_request_by_panpost_payload, **kwargs):
        """
        Retrieve a list of decision records for a card
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postdecision_request_by_pan_with_http_info(decision_request_by_panpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DecisionRequestByPanpostPayload decision_request_by_panpost_payload: decisionHistoryRequest (required)
        :return: DecisionRequestByPanpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['decision_request_by_panpost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postdecision_request_by_pan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'decision_request_by_panpost_payload' is set
        if ('decision_request_by_panpost_payload' not in params) or (params['decision_request_by_panpost_payload'] is None):
            raise ValueError("Missing the required parameter `decision_request_by_panpost_payload` when calling `postdecision_request_by_pan`")


        collection_formats = {}

        path = '/vctc/validation/v1/decisions/cardinquiry'.replace('{format}', 'json')
        resource_path = 'decisions/cardinquiry'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'decision_request_by_panpost_payload' in params:
            body_params = params['decision_request_by_panpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DecisionRequestByPanpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postpreevaluations(self, preevaluationspost_payload, **kwargs):
        """
        Request a Pre-Evaluation recommendation on a transaction before it is run
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postpreevaluations(preevaluationspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PreevaluationspostPayload preevaluationspost_payload: preEvaluationRequest (required)
        :return: PreevaluationspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postpreevaluations_with_http_info(preevaluationspost_payload, **kwargs)
        else:
            (data) = self.postpreevaluations_with_http_info(preevaluationspost_payload, **kwargs)
            return data

    def postpreevaluations_with_http_info(self, preevaluationspost_payload, **kwargs):
        """
        Request a Pre-Evaluation recommendation on a transaction before it is run
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postpreevaluations_with_http_info(preevaluationspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PreevaluationspostPayload preevaluationspost_payload: preEvaluationRequest (required)
        :return: PreevaluationspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['preevaluationspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postpreevaluations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'preevaluationspost_payload' is set
        if ('preevaluationspost_payload' not in params) or (params['preevaluationspost_payload'] is None):
            raise ValueError("Missing the required parameter `preevaluationspost_payload` when calling `postpreevaluations`")


        collection_formats = {}

        path = '/vctc/validation/v1/preevaluations'.replace('{format}', 'json')
        resource_path = 'preevaluations'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'preevaluationspost_payload' in params:
            body_params = params['preevaluationspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PreevaluationspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def putdecision_request_actions(self, decision_id, decision_request_actionsput_payload, **kwargs):
        """
        Update the state of a specific decision record
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.putdecision_request_actions(decision_id, decision_request_actionsput_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str decision_id: The ID of the document for the document to be updated (required)
        :param DecisionRequestActionsputPayload decision_request_actionsput_payload: decisionUpdate (required)
        :return: DecisionRequestActionsputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.putdecision_request_actions_with_http_info(decision_id, decision_request_actionsput_payload, **kwargs)
        else:
            (data) = self.putdecision_request_actions_with_http_info(decision_id, decision_request_actionsput_payload, **kwargs)
            return data

    def putdecision_request_actions_with_http_info(self, decision_id, decision_request_actionsput_payload, **kwargs):
        """
        Update the state of a specific decision record
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.putdecision_request_actions_with_http_info(decision_id, decision_request_actionsput_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str decision_id: The ID of the document for the document to be updated (required)
        :param DecisionRequestActionsputPayload decision_request_actionsput_payload: decisionUpdate (required)
        :return: DecisionRequestActionsputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['decision_id', 'decision_request_actionsput_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method putdecision_request_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'decision_id' is set
        if ('decision_id' not in params) or (params['decision_id'] is None):
            raise ValueError("Missing the required parameter `decision_id` when calling `putdecision_request_actions`")
        # verify the required parameter 'decision_request_actionsput_payload' is set
        if ('decision_request_actionsput_payload' not in params) or (params['decision_request_actionsput_payload'] is None):
            raise ValueError("Missing the required parameter `decision_request_actionsput_payload` when calling `putdecision_request_actions`")


        collection_formats = {}

        path = '/vctc/validation/v1/decisions/{decisionID}'.replace('{format}', 'json')
        resource_path = 'decisions/{decisionID}'
        path_params = {}
        if 'decision_id' in params:
            path_params['decisionID'] = params['decision_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'decision_request_actionsput_payload' in params:
            body_params = params['decision_request_actionsput_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DecisionRequestActionsputResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------