# coding: utf-8

"""
    Authorization API

    The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. 

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest
import datetime
import pytz
import random
import string
import re
import json

from src.apis.authorization_decision_api import AuthorizationDecisionApi
from src.configuration import Configuration
from globalConfig import GlobalConfig


class TestAuthorizationDecisionApi(unittest.TestCase):
    """ AuthorizationDecisionApi unit test stubs """

    @classmethod
    def setUpClass(self):
        print("---------------------------------------Tests---------------------------------------\nProduct Name: Visa Transaction Controls\nApi Name: Authorization API")
        globalConfig = GlobalConfig()
        config = Configuration()
        config.username = globalConfig.userName
        config.password = globalConfig.password
        config.cert_file = globalConfig.certificatePath
        config.key_file = globalConfig.privateKeyPath
        config.shared_secret = globalConfig.sharedSecret
        config.api_key['apikey'] = globalConfig.apiKey
        config.ssl_ca_cert = globalConfig.caCertPath
        config.proxy_url = globalConfig.proxyUrl
        self.api = AuthorizationDecisionApi(None)

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def transformPayload(self, payload):
        payload = self.editLocalTime(payload)
        payload = self.addRandom(payload)
        payload = json.loads(payload)
        return payload

    def editLocalTime(self, payload):
        timezone = pytz.timezone("America/Los_Angeles")
        timestamp = timezone.localize(datetime.datetime.now()).strftime('%Y-%m-%dT%H:%M:%S')
        pattern = re.compile('"localTransactionDateTime":".{19}"', re.IGNORECASE)
        replacement = '"localTransactionDateTime": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)

        timestamp = timezone.localize(datetime.datetime.now()).strftime('%m%d%H%M%S')
        pattern = re.compile('"dateTimeLocal":".{10}"', re.IGNORECASE)
        replacement = '"dateTimeLocal": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)
        return payload

    def addRandom(self, payload):
        if payload == 'mle_keyId':
            return self.mleKeyId
        payload = re.sub(r'random_string', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        payload = re.sub(r'random_integer', ''.join(random.choice(string.digits) for _ in range(8)), payload)
        payload= re.sub(r'random', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        return payload

    """
    Test case for getdecision_request_actions

    .
    """
    def testgetdecision_request_actions(self):
        print("\ngetdecision_request_actions")
        result = self.api.getdecision_request_actions(self.addRandom('random'))
        pass

    """
    Test case for getdecisions_history

    .
    """
    def testgetdecisions_history(self):
        print("\ngetdecisions_history")
        result = self.api.getdecisions_history(self.addRandom('random'), self.addRandom('random'))
        pass

    """
    Test case for postdecision_inquiry

    .
    """
    def testpostdecision_inquiry(self):
        print("\npostdecision_inquiry")
        result = self.api.postdecision_inquiry(self.transformPayload('{"cardAcceptorTerminalID":"string","retrievalReferenceNumber":"000000000002","dateTimeLocal":"0322080000"}'))
        pass

    """
    Test case for postdecision_request

    .
    """
    def testpostdecision_request(self):
        print("\npostdecision_request")
        result = self.api.postdecision_request(self.transformPayload('{"processingCode":"000000","dateTimeLocal":"0322080000","retrievalReferenceNumber":"000000000002","messageType":"0100","primaryAccountNumber":"4514170000000001","merchantInfo":{"city":"Highlands Ranch","merchantCategoryCode":"5310","name":"POS at ","countryCode":"USA","region":"CO","transactionAmount":10,"addressLines":["6675 Business Center Dr"],"postalCode":"80130","currencyCode":"840"},"pointOfServiceInfo":{"securityCondition":"IDENTIFICATION_VERIFIED","terminalEntryCapability":"MAG_STRIPE_READ","terminalType":"POS_TERMINAL","terminalClass":{"howOperated":"CUSTOMER_OPERATED","deviceLocation":"ON_PREMISE","isAttended":false},"presentationData":{"howPresented":"CUSTOMER_PRESENT","isCardPresent":true}},"transactionID":"2132133231","cardholderBillAmount":100,"decisionType":"RECOMMENDED"}'))
        pass

    """
    Test case for postdecision_request_by_pan

    .
    """
    def testpostdecision_request_by_pan(self):
        print("\npostdecision_request_by_pan")
        result = self.api.postdecision_request_by_pan(self.transformPayload('{"primaryAccountNumber":"4514170000000001","paginationData":{"startIndex":"1","pageLimit":"10"}}'))
        pass

    """
    Test case for postpreevaluations

    .
    """
    def testpostpreevaluations(self):
        print("\npostpreevaluations")
        result = self.api.postpreevaluations(self.transformPayload('{"processingCode":"000000","dateTimeLocal":"0322080000","retrievalReferenceNumber":"000000000002","messageType":"0100","primaryAccountNumber":"4514170000000001","merchantInfo":{"city":"Highlands Ranch","merchantCategoryCode":"5310","name":"POS at ","countryCode":"USA","currencyCode":"840","addressLines":["6675 Business Center Dr"],"postalCode":"80130","region":"CO"},"pointOfServiceInfo":{"securityCondition":"IDENTIFICATION_VERIFIED","terminalEntryCapability":"MAG_STRIPE_READ","terminalType":"POS_TERMINAL","terminalClass":{"howOperated":"CUSTOMER_OPERATED","deviceLocation":"ON_PREMISE","isAttended":false},"presentationData":{"howPresented":"CUSTOMER_PRESENT","isCardPresent":true}},"cardholderBillAmount":100,"decisionType":"PREEVAL"}'))
        pass

    """
    Test case for putdecision_request_actions

    .
    """
    def testputdecision_request_actions(self):
        print("\nputdecision_request_actions")
        result = self.api.putdecision_request_actions(self.addRandom('random'), self.transformPayload('{"decisionType":"COMPLETE","transactionApproved":"DECLINED","isDeclineResultOfTransactionControl":true}'))
        pass


if __name__ == '__main__':
    unittest.main()


# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------