# coding: utf-8

"""
    Customer Rules API

    The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Resource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_update_time_stamp=None, document_id=None, user_identifier=None, transaction_controls=None, merchant_controls=None, global_controls=None):
        """
        Resource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_update_time_stamp': 'str',
            'document_id': 'str',
            'user_identifier': 'str',
            'transaction_controls': 'TransactionControls',
            'merchant_controls': 'MerchantControls',
            'global_controls': 'GlobalControls'
        }

        self.attribute_map = {
            'last_update_time_stamp': 'lastUpdateTimeStamp',
            'document_id': 'documentID',
            'user_identifier': 'userIdentifier',
            'transaction_controls': 'transactionControls',
            'merchant_controls': 'merchantControls',
            'global_controls': 'globalControls'
        }

        self._last_update_time_stamp = last_update_time_stamp
        self._document_id = document_id
        self._user_identifier = user_identifier
        self._transaction_controls = transaction_controls
        self._merchant_controls = merchant_controls
        self._global_controls = global_controls

    @property
    def last_update_time_stamp(self):
        """
        Gets the last_update_time_stamp of this Resource.
        Provides the timestamp, in GMT, of when the resource was last updated.

        :return: The last_update_time_stamp of this Resource.
        :rtype: str
        """
        return self._last_update_time_stamp

    @last_update_time_stamp.setter
    def last_update_time_stamp(self, last_update_time_stamp):
        """
        Sets the last_update_time_stamp of this Resource.
        Provides the timestamp, in GMT, of when the resource was last updated.

        :param last_update_time_stamp: The last_update_time_stamp of this Resource.
        :type: str
        """

        self._last_update_time_stamp = last_update_time_stamp

    @property
    def document_id(self):
        """
        Gets the document_id of this Resource.
        System generated ID of the Control Document bound to Account Identifier (primaryAccountNumber/paymentToken)

        :return: The document_id of this Resource.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """
        Sets the document_id of this Resource.
        System generated ID of the Control Document bound to Account Identifier (primaryAccountNumber/paymentToken)

        :param document_id: The document_id of this Resource.
        :type: str
        """

        self._document_id = document_id

    @property
    def user_identifier(self):
        """
        Gets the user_identifier of this Resource.
        Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters

        :return: The user_identifier of this Resource.
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """
        Sets the user_identifier of this Resource.
        Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters

        :param user_identifier: The user_identifier of this Resource.
        :type: str
        """

        self._user_identifier = user_identifier

    @property
    def transaction_controls(self):
        """
        Gets the transaction_controls of this Resource.

        :return: The transaction_controls of this Resource.
        :rtype: TransactionControls
        """
        return self._transaction_controls

    @transaction_controls.setter
    def transaction_controls(self, transaction_controls):
        """
        Sets the transaction_controls of this Resource.

        :param transaction_controls: The transaction_controls of this Resource.
        :type: TransactionControls
        """

        self._transaction_controls = transaction_controls

    @property
    def merchant_controls(self):
        """
        Gets the merchant_controls of this Resource.

        :return: The merchant_controls of this Resource.
        :rtype: MerchantControls
        """
        return self._merchant_controls

    @merchant_controls.setter
    def merchant_controls(self, merchant_controls):
        """
        Sets the merchant_controls of this Resource.

        :param merchant_controls: The merchant_controls of this Resource.
        :type: MerchantControls
        """

        self._merchant_controls = merchant_controls

    @property
    def global_controls(self):
        """
        Gets the global_controls of this Resource.

        :return: The global_controls of this Resource.
        :rtype: GlobalControls
        """
        return self._global_controls

    @global_controls.setter
    def global_controls(self, global_controls):
        """
        Sets the global_controls of this Resource.

        :param global_controls: The global_controls of this Resource.
        :type: GlobalControls
        """

        self._global_controls = global_controls

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Resource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------