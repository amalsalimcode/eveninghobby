# coding: utf-8

"""
    Customer Rules API

    The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GlobalControlsInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_control_enabled=None, should_target_specific_card=None, time_range=None, should_alert_on_decline=None, alert_threshold=None, decline_threshold=None, user_information=None, spend_limit=None, user_identifier=None, should_decline_all=None, card_detail=None, filter_by_country=None):
        """
        GlobalControlsInner - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_control_enabled': 'bool',
            'should_target_specific_card': 'bool',
            'time_range': 'TimeRange',
            'should_alert_on_decline': 'bool',
            'alert_threshold': 'float',
            'decline_threshold': 'float',
            'user_information': 'UserInformation',
            'spend_limit': 'SpendLimit',
            'user_identifier': 'str',
            'should_decline_all': 'bool',
            'card_detail': 'CardDetail',
            'filter_by_country': 'FilterByCountry'
        }

        self.attribute_map = {
            'is_control_enabled': 'isControlEnabled',
            'should_target_specific_card': 'shouldTargetSpecificCard',
            'time_range': 'timeRange',
            'should_alert_on_decline': 'shouldAlertOnDecline',
            'alert_threshold': 'alertThreshold',
            'decline_threshold': 'declineThreshold',
            'user_information': 'userInformation',
            'spend_limit': 'spendLimit',
            'user_identifier': 'userIdentifier',
            'should_decline_all': 'shouldDeclineAll',
            'card_detail': 'cardDetail',
            'filter_by_country': 'filterByCountry'
        }

        self._is_control_enabled = is_control_enabled
        self._should_target_specific_card = should_target_specific_card
        self._time_range = time_range
        self._should_alert_on_decline = should_alert_on_decline
        self._alert_threshold = alert_threshold
        self._decline_threshold = decline_threshold
        self._user_information = user_information
        self._spend_limit = spend_limit
        self._user_identifier = user_identifier
        self._should_decline_all = should_decline_all
        self._card_detail = card_detail
        self._filter_by_country = filter_by_country

    @property
    def is_control_enabled(self):
        """
        Gets the is_control_enabled of this GlobalControlsInner.
        If the indicator is set to true, the control type is considered active, if set to false the control type is not checked by the authorization engine

        :return: The is_control_enabled of this GlobalControlsInner.
        :rtype: bool
        """
        return self._is_control_enabled

    @is_control_enabled.setter
    def is_control_enabled(self, is_control_enabled):
        """
        Sets the is_control_enabled of this GlobalControlsInner.
        If the indicator is set to true, the control type is considered active, if set to false the control type is not checked by the authorization engine

        :param is_control_enabled: The is_control_enabled of this GlobalControlsInner.
        :type: bool
        """
        if is_control_enabled is None:
            raise ValueError("Invalid value for `is_control_enabled`, must not be `None`")

        self._is_control_enabled = is_control_enabled

    @property
    def should_target_specific_card(self):
        """
        Gets the should_target_specific_card of this GlobalControlsInner.
        If the indicator is set to true, card details are required and card details will be used to locate a transaction control

        :return: The should_target_specific_card of this GlobalControlsInner.
        :rtype: bool
        """
        return self._should_target_specific_card

    @should_target_specific_card.setter
    def should_target_specific_card(self, should_target_specific_card):
        """
        Sets the should_target_specific_card of this GlobalControlsInner.
        If the indicator is set to true, card details are required and card details will be used to locate a transaction control

        :param should_target_specific_card: The should_target_specific_card of this GlobalControlsInner.
        :type: bool
        """

        self._should_target_specific_card = should_target_specific_card

    @property
    def time_range(self):
        """
        Gets the time_range of this GlobalControlsInner.

        :return: The time_range of this GlobalControlsInner.
        :rtype: TimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """
        Sets the time_range of this GlobalControlsInner.

        :param time_range: The time_range of this GlobalControlsInner.
        :type: TimeRange
        """

        self._time_range = time_range

    @property
    def should_alert_on_decline(self):
        """
        Gets the should_alert_on_decline of this GlobalControlsInner.
        If true, VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type.

        :return: The should_alert_on_decline of this GlobalControlsInner.
        :rtype: bool
        """
        return self._should_alert_on_decline

    @should_alert_on_decline.setter
    def should_alert_on_decline(self, should_alert_on_decline):
        """
        Sets the should_alert_on_decline of this GlobalControlsInner.
        If true, VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type.

        :param should_alert_on_decline: The should_alert_on_decline of this GlobalControlsInner.
        :type: bool
        """

        self._should_alert_on_decline = should_alert_on_decline

    @property
    def alert_threshold(self):
        """
        Gets the alert_threshold of this GlobalControlsInner.
        Will trigger an alert for all approved transactions with amounts that equal or exceed the threshold setting for this control type. During authorization processing the cardholderBillAmount is used for comparision to identify if an alert should be sent.

        :return: The alert_threshold of this GlobalControlsInner.
        :rtype: float
        """
        return self._alert_threshold

    @alert_threshold.setter
    def alert_threshold(self, alert_threshold):
        """
        Sets the alert_threshold of this GlobalControlsInner.
        Will trigger an alert for all approved transactions with amounts that equal or exceed the threshold setting for this control type. During authorization processing the cardholderBillAmount is used for comparision to identify if an alert should be sent.

        :param alert_threshold: The alert_threshold of this GlobalControlsInner.
        :type: float
        """

        self._alert_threshold = alert_threshold

    @property
    def decline_threshold(self):
        """
        Gets the decline_threshold of this GlobalControlsInner.
        Will trigger a decline for all transactions with amounts that equal or exceed this threshold for this control type. During authorization processing the cardholderBillAmount is then used for comparison to identify if a decline should be triggered.

        :return: The decline_threshold of this GlobalControlsInner.
        :rtype: float
        """
        return self._decline_threshold

    @decline_threshold.setter
    def decline_threshold(self, decline_threshold):
        """
        Sets the decline_threshold of this GlobalControlsInner.
        Will trigger a decline for all transactions with amounts that equal or exceed this threshold for this control type. During authorization processing the cardholderBillAmount is then used for comparison to identify if a decline should be triggered.

        :param decline_threshold: The decline_threshold of this GlobalControlsInner.
        :type: float
        """

        self._decline_threshold = decline_threshold

    @property
    def user_information(self):
        """
        Gets the user_information of this GlobalControlsInner.

        :return: The user_information of this GlobalControlsInner.
        :rtype: UserInformation
        """
        return self._user_information

    @user_information.setter
    def user_information(self, user_information):
        """
        Sets the user_information of this GlobalControlsInner.

        :param user_information: The user_information of this GlobalControlsInner.
        :type: UserInformation
        """

        self._user_information = user_information

    @property
    def spend_limit(self):
        """
        Gets the spend_limit of this GlobalControlsInner.

        :return: The spend_limit of this GlobalControlsInner.
        :rtype: SpendLimit
        """
        return self._spend_limit

    @spend_limit.setter
    def spend_limit(self, spend_limit):
        """
        Sets the spend_limit of this GlobalControlsInner.

        :param spend_limit: The spend_limit of this GlobalControlsInner.
        :type: SpendLimit
        """

        self._spend_limit = spend_limit

    @property
    def user_identifier(self):
        """
        Gets the user_identifier of this GlobalControlsInner.
        Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters

        :return: The user_identifier of this GlobalControlsInner.
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """
        Sets the user_identifier of this GlobalControlsInner.
        Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters

        :param user_identifier: The user_identifier of this GlobalControlsInner.
        :type: str
        """

        self._user_identifier = user_identifier

    @property
    def should_decline_all(self):
        """
        Gets the should_decline_all of this GlobalControlsInner.
        If the indicator is set to true, all qualifying transactions for this control type will receive a decline recommendation. If set to false, other attributes like declineThreshold will be checked.

        :return: The should_decline_all of this GlobalControlsInner.
        :rtype: bool
        """
        return self._should_decline_all

    @should_decline_all.setter
    def should_decline_all(self, should_decline_all):
        """
        Sets the should_decline_all of this GlobalControlsInner.
        If the indicator is set to true, all qualifying transactions for this control type will receive a decline recommendation. If set to false, other attributes like declineThreshold will be checked.

        :param should_decline_all: The should_decline_all of this GlobalControlsInner.
        :type: bool
        """
        if should_decline_all is None:
            raise ValueError("Invalid value for `should_decline_all`, must not be `None`")

        self._should_decline_all = should_decline_all

    @property
    def card_detail(self):
        """
        Gets the card_detail of this GlobalControlsInner.

        :return: The card_detail of this GlobalControlsInner.
        :rtype: CardDetail
        """
        return self._card_detail

    @card_detail.setter
    def card_detail(self, card_detail):
        """
        Sets the card_detail of this GlobalControlsInner.

        :param card_detail: The card_detail of this GlobalControlsInner.
        :type: CardDetail
        """

        self._card_detail = card_detail

    @property
    def filter_by_country(self):
        """
        Gets the filter_by_country of this GlobalControlsInner.

        :return: The filter_by_country of this GlobalControlsInner.
        :rtype: FilterByCountry
        """
        return self._filter_by_country

    @filter_by_country.setter
    def filter_by_country(self, filter_by_country):
        """
        Sets the filter_by_country of this GlobalControlsInner.

        :param filter_by_country: The filter_by_country of this GlobalControlsInner.
        :type: FilterByCountry
        """

        self._filter_by_country = filter_by_country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GlobalControlsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------