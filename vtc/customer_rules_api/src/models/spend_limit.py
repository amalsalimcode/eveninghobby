# coding: utf-8

"""
    Customer Rules API

    The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SpendLimit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, time_zone_id=None, type=None, alert_threshold=None, current_period_spend=None, decline_threshold=None):
        """
        SpendLimit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'time_zone_id': 'str',
            'type': 'str',
            'alert_threshold': 'float',
            'current_period_spend': 'float',
            'decline_threshold': 'float'
        }

        self.attribute_map = {
            'time_zone_id': 'timeZoneID',
            'type': 'type',
            'alert_threshold': 'alertThreshold',
            'current_period_spend': 'currentPeriodSpend',
            'decline_threshold': 'declineThreshold'
        }

        self._time_zone_id = time_zone_id
        self._type = type
        self._alert_threshold = alert_threshold
        self._current_period_spend = current_period_spend
        self._decline_threshold = decline_threshold

    @property
    def time_zone_id(self):
        """
        Gets the time_zone_id of this SpendLimit.
        The timeZoneID is used to determine the next currentPeriodEndTime based on spendLimitType. It should be in Continent/Region format. For example: 'America/Denver' is in United States MST.

        :return: The time_zone_id of this SpendLimit.
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """
        Sets the time_zone_id of this SpendLimit.
        The timeZoneID is used to determine the next currentPeriodEndTime based on spendLimitType. It should be in Continent/Region format. For example: 'America/Denver' is in United States MST.

        :param time_zone_id: The time_zone_id of this SpendLimit.
        :type: str
        """
        if time_zone_id is None:
            raise ValueError("Invalid value for `time_zone_id`, must not be `None`")

        self._time_zone_id = time_zone_id

    @property
    def type(self):
        """
        Gets the type of this SpendLimit.
        Provides the time period that the control spans.Valid values include: LMT_MONTH, LMT_WEEK, LMT_DAY.

        :return: The type of this SpendLimit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SpendLimit.
        Provides the time period that the control spans.Valid values include: LMT_MONTH, LMT_WEEK, LMT_DAY.

        :param type: The type of this SpendLimit.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def alert_threshold(self):
        """
        Gets the alert_threshold of this SpendLimit.
        The maximum value of total approved purchases within the time period before triggering an alert. Once met or exceeded, any further purchases related to this control-type will not trigger another spendLimit alert until the next time period begins. However, any transaction that meet/exceed the per transaction alertThreshold will continue to trigger alerts.

        :return: The alert_threshold of this SpendLimit.
        :rtype: float
        """
        return self._alert_threshold

    @alert_threshold.setter
    def alert_threshold(self, alert_threshold):
        """
        Sets the alert_threshold of this SpendLimit.
        The maximum value of total approved purchases within the time period before triggering an alert. Once met or exceeded, any further purchases related to this control-type will not trigger another spendLimit alert until the next time period begins. However, any transaction that meet/exceed the per transaction alertThreshold will continue to trigger alerts.

        :param alert_threshold: The alert_threshold of this SpendLimit.
        :type: float
        """

        self._alert_threshold = alert_threshold

    @property
    def current_period_spend(self):
        """
        Gets the current_period_spend of this SpendLimit.
        The total amount of all approved transactions performed within the time period for this control type. It is reset by the amount of the first transaction for this control type once a new time period begins.

        :return: The current_period_spend of this SpendLimit.
        :rtype: float
        """
        return self._current_period_spend

    @current_period_spend.setter
    def current_period_spend(self, current_period_spend):
        """
        Sets the current_period_spend of this SpendLimit.
        The total amount of all approved transactions performed within the time period for this control type. It is reset by the amount of the first transaction for this control type once a new time period begins.

        :param current_period_spend: The current_period_spend of this SpendLimit.
        :type: float
        """
        if current_period_spend is None:
            raise ValueError("Invalid value for `current_period_spend`, must not be `None`")

        self._current_period_spend = current_period_spend

    @property
    def decline_threshold(self):
        """
        Gets the decline_threshold of this SpendLimit.
        The maximum accumulated spend for the time period at which VTC will then trigger declines. Once met or exceeded, all subsequent purchases related to the control will trigger a decline until the new time period begins (e.g. a new month.) If 'alertOnDecline' is true, then the cardholder will be notified of these transactions.

        :return: The decline_threshold of this SpendLimit.
        :rtype: float
        """
        return self._decline_threshold

    @decline_threshold.setter
    def decline_threshold(self, decline_threshold):
        """
        Sets the decline_threshold of this SpendLimit.
        The maximum accumulated spend for the time period at which VTC will then trigger declines. Once met or exceeded, all subsequent purchases related to the control will trigger a decline until the new time period begins (e.g. a new month.) If 'alertOnDecline' is true, then the cardholder will be notified of these transactions.

        :param decline_threshold: The decline_threshold of this SpendLimit.
        :type: float
        """
        if decline_threshold is None:
            raise ValueError("Invalid value for `decline_threshold`, must not be `None`")

        self._decline_threshold = decline_threshold

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SpendLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------