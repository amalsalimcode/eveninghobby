# coding: utf-8

"""
    Customer Rules API

    The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AlertsEnrollmentDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, country_code=None, first_name=None, preferred_language=None, last_name=None, default_alerts_preferences=None, user_identifier=None):
        """
        AlertsEnrollmentDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'country_code': 'str',
            'first_name': 'str',
            'preferred_language': 'str',
            'last_name': 'str',
            'default_alerts_preferences': 'DefaultAlertsPreferences',
            'user_identifier': 'str'
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'first_name': 'firstName',
            'preferred_language': 'preferredLanguage',
            'last_name': 'lastName',
            'default_alerts_preferences': 'defaultAlertsPreferences',
            'user_identifier': 'userIdentifier'
        }

        self._country_code = country_code
        self._first_name = first_name
        self._preferred_language = preferred_language
        self._last_name = last_name
        self._default_alerts_preferences = default_alerts_preferences
        self._user_identifier = user_identifier

    @property
    def country_code(self):
        """
        Gets the country_code of this AlertsEnrollmentDetails.
        Three letter ISO ALPHA-3 Code.

        :return: The country_code of this AlertsEnrollmentDetails.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this AlertsEnrollmentDetails.
        Three letter ISO ALPHA-3 Code.

        :param country_code: The country_code of this AlertsEnrollmentDetails.
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def first_name(self):
        """
        Gets the first_name of this AlertsEnrollmentDetails.
        First name of the Customer, Maximum of 25 characters

        :return: The first_name of this AlertsEnrollmentDetails.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this AlertsEnrollmentDetails.
        First name of the Customer, Maximum of 25 characters

        :param first_name: The first_name of this AlertsEnrollmentDetails.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def preferred_language(self):
        """
        Gets the preferred_language of this AlertsEnrollmentDetails.
        Language codes supported are en-us (English US) and es-us (Spanish US).

        :return: The preferred_language of this AlertsEnrollmentDetails.
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """
        Sets the preferred_language of this AlertsEnrollmentDetails.
        Language codes supported are en-us (English US) and es-us (Spanish US).

        :param preferred_language: The preferred_language of this AlertsEnrollmentDetails.
        :type: str
        """
        if preferred_language is None:
            raise ValueError("Invalid value for `preferred_language`, must not be `None`")

        self._preferred_language = preferred_language

    @property
    def last_name(self):
        """
        Gets the last_name of this AlertsEnrollmentDetails.
        Last name of the Customer, Maximum of 25 characters

        :return: The last_name of this AlertsEnrollmentDetails.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this AlertsEnrollmentDetails.
        Last name of the Customer, Maximum of 25 characters

        :param last_name: The last_name of this AlertsEnrollmentDetails.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def default_alerts_preferences(self):
        """
        Gets the default_alerts_preferences of this AlertsEnrollmentDetails.

        :return: The default_alerts_preferences of this AlertsEnrollmentDetails.
        :rtype: DefaultAlertsPreferences
        """
        return self._default_alerts_preferences

    @default_alerts_preferences.setter
    def default_alerts_preferences(self, default_alerts_preferences):
        """
        Sets the default_alerts_preferences of this AlertsEnrollmentDetails.

        :param default_alerts_preferences: The default_alerts_preferences of this AlertsEnrollmentDetails.
        :type: DefaultAlertsPreferences
        """
        if default_alerts_preferences is None:
            raise ValueError("Invalid value for `default_alerts_preferences`, must not be `None`")

        self._default_alerts_preferences = default_alerts_preferences

    @property
    def user_identifier(self):
        """
        Gets the user_identifier of this AlertsEnrollmentDetails.
        Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters

        :return: The user_identifier of this AlertsEnrollmentDetails.
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """
        Sets the user_identifier of this AlertsEnrollmentDetails.
        Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters

        :param user_identifier: The user_identifier of this AlertsEnrollmentDetails.
        :type: str
        """
        if user_identifier is None:
            raise ValueError("Invalid value for `user_identifier`, must not be `None`")

        self._user_identifier = user_identifier

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertsEnrollmentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------