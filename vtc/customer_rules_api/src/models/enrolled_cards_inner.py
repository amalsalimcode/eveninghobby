# coding: utf-8

"""
    Customer Rules API

    The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnrolledCardsInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_information=None, account_identifier=None, user_identifier=None):
        """
        EnrolledCardsInner - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_information': 'UserInformation',
            'account_identifier': 'str',
            'user_identifier': 'str'
        }

        self.attribute_map = {
            'user_information': 'userInformation',
            'account_identifier': 'accountIdentifier',
            'user_identifier': 'userIdentifier'
        }

        self._user_information = user_information
        self._account_identifier = account_identifier
        self._user_identifier = user_identifier

    @property
    def user_information(self):
        """
        Gets the user_information of this EnrolledCardsInner.

        :return: The user_information of this EnrolledCardsInner.
        :rtype: UserInformation
        """
        return self._user_information

    @user_information.setter
    def user_information(self, user_information):
        """
        Sets the user_information of this EnrolledCardsInner.

        :param user_information: The user_information of this EnrolledCardsInner.
        :type: UserInformation
        """

        self._user_information = user_information

    @property
    def account_identifier(self):
        """
        Gets the account_identifier of this EnrolledCardsInner.
        Card number to be enrolled in VTC. AccountIdentifier can be a primaryAccountNumber or paymentToken.

        :return: The account_identifier of this EnrolledCardsInner.
        :rtype: str
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier):
        """
        Sets the account_identifier of this EnrolledCardsInner.
        Card number to be enrolled in VTC. AccountIdentifier can be a primaryAccountNumber or paymentToken.

        :param account_identifier: The account_identifier of this EnrolledCardsInner.
        :type: str
        """
        if account_identifier is None:
            raise ValueError("Invalid value for `account_identifier`, must not be `None`")

        self._account_identifier = account_identifier

    @property
    def user_identifier(self):
        """
        Gets the user_identifier of this EnrolledCardsInner.
        Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters

        :return: The user_identifier of this EnrolledCardsInner.
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """
        Sets the user_identifier of this EnrolledCardsInner.
        Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters

        :param user_identifier: The user_identifier of this EnrolledCardsInner.
        :type: str
        """

        self._user_identifier = user_identifier

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnrolledCardsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------