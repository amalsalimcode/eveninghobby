# coding: utf-8

"""
    Customer Rules API

    The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re
import json

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CustomerRulesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()

        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def deletecard_replacement(self, card_replacementdelete_payload, **kwargs):
        """
        Delete a Control Document using an Account Number (primaryAccountNumber or paymentToken).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecard_replacement(card_replacementdelete_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CardReplacementdeletePayload card_replacementdelete_payload: request (required)
        :return: CardReplacementdeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecard_replacement_with_http_info(card_replacementdelete_payload, **kwargs)
        else:
            (data) = self.deletecard_replacement_with_http_info(card_replacementdelete_payload, **kwargs)
            return data

    def deletecard_replacement_with_http_info(self, card_replacementdelete_payload, **kwargs):
        """
        Delete a Control Document using an Account Number (primaryAccountNumber or paymentToken).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecard_replacement_with_http_info(card_replacementdelete_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CardReplacementdeletePayload card_replacementdelete_payload: request (required)
        :return: CardReplacementdeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_replacementdelete_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecard_replacement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_replacementdelete_payload' is set
        if ('card_replacementdelete_payload' not in params) or (params['card_replacementdelete_payload'] is None):
            raise ValueError("Missing the required parameter `card_replacementdelete_payload` when calling `deletecard_replacement`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/accounts/accountupdate'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/accounts/accountupdate'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_replacementdelete_payload' in params:
            body_params = params['card_replacementdelete_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CardReplacementdeleteResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def deletedelete_control_document_by_doc_id(self, document_id, **kwargs):
        """
        Delete a Control Document.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletedelete_control_document_by_doc_id(document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document to be de-enrolled. The document will be deleted. (required)
        :return: DeleteControlDocumentByDocIddeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletedelete_control_document_by_doc_id_with_http_info(document_id, **kwargs)
        else:
            (data) = self.deletedelete_control_document_by_doc_id_with_http_info(document_id, **kwargs)
            return data

    def deletedelete_control_document_by_doc_id_with_http_info(self, document_id, **kwargs):
        """
        Delete a Control Document.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletedelete_control_document_by_doc_id_with_http_info(document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document to be de-enrolled. The document will be deleted. (required)
        :return: DeleteControlDocumentByDocIddeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletedelete_control_document_by_doc_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `deletedelete_control_document_by_doc_id`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/{documentID}'
        path_params = {}
        if 'document_id' in params:
            path_params['documentID'] = params['document_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteControlDocumentByDocIddeleteResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def deletemanage_controls(self, document_id, manage_controlsdelete_payload, **kwargs):
        """
        Delete an existing control type in a Control Document.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletemanage_controls(document_id, manage_controlsdelete_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document from where control rules are to be deleted, Does not delete the document (required)
        :param ManageControlsdeletePayload manage_controlsdelete_payload: request (required)
        :return: ManageControlsdeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletemanage_controls_with_http_info(document_id, manage_controlsdelete_payload, **kwargs)
        else:
            (data) = self.deletemanage_controls_with_http_info(document_id, manage_controlsdelete_payload, **kwargs)
            return data

    def deletemanage_controls_with_http_info(self, document_id, manage_controlsdelete_payload, **kwargs):
        """
        Delete an existing control type in a Control Document.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletemanage_controls_with_http_info(document_id, manage_controlsdelete_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document from where control rules are to be deleted, Does not delete the document (required)
        :param ManageControlsdeletePayload manage_controlsdelete_payload: request (required)
        :return: ManageControlsdeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id', 'manage_controlsdelete_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletemanage_controls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `deletemanage_controls`")
        # verify the required parameter 'manage_controlsdelete_payload' is set
        if ('manage_controlsdelete_payload' not in params) or (params['manage_controlsdelete_payload'] is None):
            raise ValueError("Missing the required parameter `manage_controlsdelete_payload` when calling `deletemanage_controls`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/{documentID}/rules'
        path_params = {}
        if 'document_id' in params:
            path_params['documentID'] = params['document_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'manage_controlsdelete_payload' in params:
            body_params = params['manage_controlsdelete_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ManageControlsdeleteResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getapplication_configuration(self, **kwargs):
        """
        Retrieve the App's configuration data for notification callback settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getapplication_configuration(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ApplicationConfigurationgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getapplication_configuration_with_http_info(**kwargs)
        else:
            (data) = self.getapplication_configuration_with_http_info(**kwargs)
            return data

    def getapplication_configuration_with_http_info(self, **kwargs):
        """
        Retrieve the App's configuration data for notification callback settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getapplication_configuration_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ApplicationConfigurationgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getapplication_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/applications/configuration'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/applications/configuration'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationConfigurationgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getmanage_controls(self, document_id, **kwargs):
        """
        Retrieve a Control Document
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getmanage_controls(document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document to be returned. (required)
        :param str user_identifier: Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters.
        :return: ManageControlsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getmanage_controls_with_http_info(document_id, **kwargs)
        else:
            (data) = self.getmanage_controls_with_http_info(document_id, **kwargs)
            return data

    def getmanage_controls_with_http_info(self, document_id, **kwargs):
        """
        Retrieve a Control Document
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getmanage_controls_with_http_info(document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document to be returned. (required)
        :param str user_identifier: Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters.
        :return: ManageControlsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id', 'user_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmanage_controls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `getmanage_controls`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/{documentID}/rules'
        path_params = {}
        if 'document_id' in params:
            path_params['documentID'] = params['document_id']

        query_params = {}
        if 'user_identifier' in params:
            query_params['userIdentifier'] = params['user_identifier']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ManageControlsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gettransaction_control_document_history(self, document_id, **kwargs):
        """
        Get Transaction Control Changes History(Audit) by documentID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gettransaction_control_document_history(document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document to be returned. (required)
        :return: TransactionControlDocumentHistorygetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gettransaction_control_document_history_with_http_info(document_id, **kwargs)
        else:
            (data) = self.gettransaction_control_document_history_with_http_info(document_id, **kwargs)
            return data

    def gettransaction_control_document_history_with_http_info(self, document_id, **kwargs):
        """
        Get Transaction Control Changes History(Audit) by documentID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gettransaction_control_document_history_with_http_info(document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document to be returned. (required)
        :return: TransactionControlDocumentHistorygetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gettransaction_control_document_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `gettransaction_control_document_history`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/controlHistory'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/{documentID}/controlHistory'
        path_params = {}
        if 'document_id' in params:
            path_params['documentID'] = params['document_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TransactionControlDocumentHistorygetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postbatch_enrollment(self, app_id, sponsor_id, batch_enrollmentpost_payload, **kwargs):
        """
        Enroll a batch of accounts in Visa Transaction Controls (VTC)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postbatch_enrollment(app_id, sponsor_id, batch_enrollmentpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (required)
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP (required)
        :param BatchEnrollmentpostPayload batch_enrollmentpost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :return: BatchEnrollmentpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postbatch_enrollment_with_http_info(app_id, sponsor_id, batch_enrollmentpost_payload, **kwargs)
        else:
            (data) = self.postbatch_enrollment_with_http_info(app_id, sponsor_id, batch_enrollmentpost_payload, **kwargs)
            return data

    def postbatch_enrollment_with_http_info(self, app_id, sponsor_id, batch_enrollmentpost_payload, **kwargs):
        """
        Enroll a batch of accounts in Visa Transaction Controls (VTC)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postbatch_enrollment_with_http_info(app_id, sponsor_id, batch_enrollmentpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (required)
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP (required)
        :param BatchEnrollmentpostPayload batch_enrollmentpost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :return: BatchEnrollmentpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'sponsor_id', 'batch_enrollmentpost_payload', 'app_group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postbatch_enrollment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `postbatch_enrollment`")
        # verify the required parameter 'sponsor_id' is set
        if ('sponsor_id' not in params) or (params['sponsor_id'] is None):
            raise ValueError("Missing the required parameter `sponsor_id` when calling `postbatch_enrollment`")
        # verify the required parameter 'batch_enrollmentpost_payload' is set
        if ('batch_enrollmentpost_payload' not in params) or (params['batch_enrollmentpost_payload'] is None):
            raise ValueError("Missing the required parameter `batch_enrollmentpost_payload` when calling `postbatch_enrollment`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/batch'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/batch'
        path_params = {}

        query_params = {}

        header_params = {}
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_enrollmentpost_payload' in params:
            body_params = params['batch_enrollmentpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BatchEnrollmentpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postcard_replacement(self, card_replacementpost_payload, **kwargs):
        """
        Update the existing account identifier with new one (Card Replacement)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postcard_replacement(card_replacementpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CardReplacementpostPayload card_replacementpost_payload: request (required)
        :return: CardReplacementpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postcard_replacement_with_http_info(card_replacementpost_payload, **kwargs)
        else:
            (data) = self.postcard_replacement_with_http_info(card_replacementpost_payload, **kwargs)
            return data

    def postcard_replacement_with_http_info(self, card_replacementpost_payload, **kwargs):
        """
        Update the existing account identifier with new one (Card Replacement)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postcard_replacement_with_http_info(card_replacementpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CardReplacementpostPayload card_replacementpost_payload: request (required)
        :return: CardReplacementpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_replacementpost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postcard_replacement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_replacementpost_payload' is set
        if ('card_replacementpost_payload' not in params) or (params['card_replacementpost_payload'] is None):
            raise ValueError("Missing the required parameter `card_replacementpost_payload` when calling `postcard_replacement`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/accounts/accountupdate'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/accounts/accountupdate'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_replacementpost_payload' in params:
            body_params = params['card_replacementpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CardReplacementpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postconfiguration_cardinquiry(self, configuration_cardinquirypost_payload, **kwargs):
        """
        Retrieve list of available payment control types for a card
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postconfiguration_cardinquiry(configuration_cardinquirypost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationCardinquirypostPayload configuration_cardinquirypost_payload: CardInquiryRequest (required)
        :return: ConfigurationCardinquirypostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postconfiguration_cardinquiry_with_http_info(configuration_cardinquirypost_payload, **kwargs)
        else:
            (data) = self.postconfiguration_cardinquiry_with_http_info(configuration_cardinquirypost_payload, **kwargs)
            return data

    def postconfiguration_cardinquiry_with_http_info(self, configuration_cardinquirypost_payload, **kwargs):
        """
        Retrieve list of available payment control types for a card
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postconfiguration_cardinquiry_with_http_info(configuration_cardinquirypost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationCardinquirypostPayload configuration_cardinquirypost_payload: CardInquiryRequest (required)
        :return: ConfigurationCardinquirypostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configuration_cardinquirypost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postconfiguration_cardinquiry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configuration_cardinquirypost_payload' is set
        if ('configuration_cardinquirypost_payload' not in params) or (params['configuration_cardinquirypost_payload'] is None):
            raise ValueError("Missing the required parameter `configuration_cardinquirypost_payload` when calling `postconfiguration_cardinquiry`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/configuration/cardinquiry'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/configuration/cardinquiry'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configuration_cardinquirypost_payload' in params:
            body_params = params['configuration_cardinquirypost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationCardinquirypostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postdecouple_tokens(self, app_id, decouple_tokenspost_payload, **kwargs):
        """
        Couple/Decouple a list of tokens from/to corresponding PAN
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postdecouple_tokens(app_id, decouple_tokenspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (required)
        :param DecoupleTokenspostPayload decouple_tokenspost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: DecoupleTokenspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postdecouple_tokens_with_http_info(app_id, decouple_tokenspost_payload, **kwargs)
        else:
            (data) = self.postdecouple_tokens_with_http_info(app_id, decouple_tokenspost_payload, **kwargs)
            return data

    def postdecouple_tokens_with_http_info(self, app_id, decouple_tokenspost_payload, **kwargs):
        """
        Couple/Decouple a list of tokens from/to corresponding PAN
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postdecouple_tokens_with_http_info(app_id, decouple_tokenspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (required)
        :param DecoupleTokenspostPayload decouple_tokenspost_payload: request (required)
        :param str app_group_id: Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present
        :param str sponsor_id: Card Program Sponsor ID as configured in VTC, and supplied by VDP
        :return: DecoupleTokenspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'decouple_tokenspost_payload', 'app_group_id', 'sponsor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postdecouple_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `postdecouple_tokens`")
        # verify the required parameter 'decouple_tokenspost_payload' is set
        if ('decouple_tokenspost_payload' not in params) or (params['decouple_tokenspost_payload'] is None):
            raise ValueError("Missing the required parameter `decouple_tokenspost_payload` when calling `postdecouple_tokens`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/accounts/decoupletokens'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/accounts/decoupletokens'
        path_params = {}

        query_params = {}

        header_params = {}
        if 'app_group_id' in params:
            header_params['App-Group-ID'] = params['app_group_id']
        if 'app_id' in params:
            header_params['App-ID'] = params['app_id']
        if 'sponsor_id' in params:
            header_params['Sponsor-ID'] = params['sponsor_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'decouple_tokenspost_payload' in params:
            body_params = params['decouple_tokenspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DecoupleTokenspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postmanage_controls(self, document_id, manage_controlspost_payload, **kwargs):
        """
        Add new payment controls to a Control Document
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmanage_controls(document_id, manage_controlspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The unique documentID of a control document. (required)
        :param ManageControlspostPayload manage_controlspost_payload: request (required)
        :return: ManageControlspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postmanage_controls_with_http_info(document_id, manage_controlspost_payload, **kwargs)
        else:
            (data) = self.postmanage_controls_with_http_info(document_id, manage_controlspost_payload, **kwargs)
            return data

    def postmanage_controls_with_http_info(self, document_id, manage_controlspost_payload, **kwargs):
        """
        Add new payment controls to a Control Document
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmanage_controls_with_http_info(document_id, manage_controlspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The unique documentID of a control document. (required)
        :param ManageControlspostPayload manage_controlspost_payload: request (required)
        :return: ManageControlspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id', 'manage_controlspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postmanage_controls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `postmanage_controls`")
        # verify the required parameter 'manage_controlspost_payload' is set
        if ('manage_controlspost_payload' not in params) or (params['manage_controlspost_payload'] is None):
            raise ValueError("Missing the required parameter `manage_controlspost_payload` when calling `postmanage_controls`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/{documentID}/rules'
        path_params = {}
        if 'document_id' in params:
            path_params['documentID'] = params['document_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'manage_controlspost_payload' in params:
            body_params = params['manage_controlspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ManageControlspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postmerchant_type_controls_card_inquiry(self, merchant_type_controls_card_inquirypost_payload, **kwargs):
        """
        Retreive list of available merchant type controls for a card
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmerchant_type_controls_card_inquiry(merchant_type_controls_card_inquirypost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MerchantTypeControlsCardInquirypostPayload merchant_type_controls_card_inquirypost_payload: CardInquiryRequest (required)
        :return: MerchantTypeControlsCardInquirypostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postmerchant_type_controls_card_inquiry_with_http_info(merchant_type_controls_card_inquirypost_payload, **kwargs)
        else:
            (data) = self.postmerchant_type_controls_card_inquiry_with_http_info(merchant_type_controls_card_inquirypost_payload, **kwargs)
            return data

    def postmerchant_type_controls_card_inquiry_with_http_info(self, merchant_type_controls_card_inquirypost_payload, **kwargs):
        """
        Retreive list of available merchant type controls for a card
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmerchant_type_controls_card_inquiry_with_http_info(merchant_type_controls_card_inquirypost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MerchantTypeControlsCardInquirypostPayload merchant_type_controls_card_inquirypost_payload: CardInquiryRequest (required)
        :return: MerchantTypeControlsCardInquirypostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_type_controls_card_inquirypost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postmerchant_type_controls_card_inquiry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_type_controls_card_inquirypost_payload' is set
        if ('merchant_type_controls_card_inquirypost_payload' not in params) or (params['merchant_type_controls_card_inquirypost_payload'] is None):
            raise ValueError("Missing the required parameter `merchant_type_controls_card_inquirypost_payload` when calling `postmerchant_type_controls_card_inquiry`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/merchanttypecontrols/cardinquiry'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/merchanttypecontrols/cardinquiry'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'merchant_type_controls_card_inquirypost_payload' in params:
            body_params = params['merchant_type_controls_card_inquirypost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MerchantTypeControlsCardInquirypostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postmobile_wallet_services(self, mobile_wallet_servicespost_payload, **kwargs):
        """
        Retrieve available Rules and existing Control Documents based on the primaryAccountNumber, paymentToken or documentID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmobile_wallet_services(mobile_wallet_servicespost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MobileWalletServicespostPayload mobile_wallet_servicespost_payload: request (required)
        :return: MobileWalletServicespostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postmobile_wallet_services_with_http_info(mobile_wallet_servicespost_payload, **kwargs)
        else:
            (data) = self.postmobile_wallet_services_with_http_info(mobile_wallet_servicespost_payload, **kwargs)
            return data

    def postmobile_wallet_services_with_http_info(self, mobile_wallet_servicespost_payload, **kwargs):
        """
        Retrieve available Rules and existing Control Documents based on the primaryAccountNumber, paymentToken or documentID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmobile_wallet_services_with_http_info(mobile_wallet_servicespost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MobileWalletServicespostPayload mobile_wallet_servicespost_payload: request (required)
        :return: MobileWalletServicespostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mobile_wallet_servicespost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postmobile_wallet_services" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mobile_wallet_servicespost_payload' is set
        if ('mobile_wallet_servicespost_payload' not in params) or (params['mobile_wallet_servicespost_payload'] is None):
            raise ValueError("Missing the required parameter `mobile_wallet_servicespost_payload` when calling `postmobile_wallet_services`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/walletservices/accountinquiry'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/walletservices/accountinquiry'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mobile_wallet_servicespost_payload' in params:
            body_params = params['mobile_wallet_servicespost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MobileWalletServicespostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def posttransaction_control_history_by_document_id(self, transaction_control_history_by_document_idpost_payload, **kwargs):
        """
        Get a control document history by primaryAccountNumber and date range. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.posttransaction_control_history_by_document_id(transaction_control_history_by_document_idpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TransactionControlHistoryByDocumentIdpostPayload transaction_control_history_by_document_idpost_payload: request (required)
        :return: TransactionControlHistoryByDocumentIdpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.posttransaction_control_history_by_document_id_with_http_info(transaction_control_history_by_document_idpost_payload, **kwargs)
        else:
            (data) = self.posttransaction_control_history_by_document_id_with_http_info(transaction_control_history_by_document_idpost_payload, **kwargs)
            return data

    def posttransaction_control_history_by_document_id_with_http_info(self, transaction_control_history_by_document_idpost_payload, **kwargs):
        """
        Get a control document history by primaryAccountNumber and date range. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.posttransaction_control_history_by_document_id_with_http_info(transaction_control_history_by_document_idpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TransactionControlHistoryByDocumentIdpostPayload transaction_control_history_by_document_idpost_payload: request (required)
        :return: TransactionControlHistoryByDocumentIdpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_control_history_by_document_idpost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posttransaction_control_history_by_document_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_control_history_by_document_idpost_payload' is set
        if ('transaction_control_history_by_document_idpost_payload' not in params) or (params['transaction_control_history_by_document_idpost_payload'] is None):
            raise ValueError("Missing the required parameter `transaction_control_history_by_document_idpost_payload` when calling `posttransaction_control_history_by_document_id`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/controlHistory'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/controlHistory'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transaction_control_history_by_document_idpost_payload' in params:
            body_params = params['transaction_control_history_by_document_idpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TransactionControlHistoryByDocumentIdpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def posttransaction_controls(self, transaction_controlspost_payload, **kwargs):
        """
        Retreive list of available transaction type controls for a card
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.posttransaction_controls(transaction_controlspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TransactionControlspostPayload transaction_controlspost_payload: CardInquiryRequest (required)
        :return: TransactionControlspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.posttransaction_controls_with_http_info(transaction_controlspost_payload, **kwargs)
        else:
            (data) = self.posttransaction_controls_with_http_info(transaction_controlspost_payload, **kwargs)
            return data

    def posttransaction_controls_with_http_info(self, transaction_controlspost_payload, **kwargs):
        """
        Retreive list of available transaction type controls for a card
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.posttransaction_controls_with_http_info(transaction_controlspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TransactionControlspostPayload transaction_controlspost_payload: CardInquiryRequest (required)
        :return: TransactionControlspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_controlspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posttransaction_controls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_controlspost_payload' is set
        if ('transaction_controlspost_payload' not in params) or (params['transaction_controlspost_payload'] is None):
            raise ValueError("Missing the required parameter `transaction_controlspost_payload` when calling `posttransaction_controls`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/transactiontypecontrols/cardinquiry'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/transactiontypecontrols/cardinquiry'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transaction_controlspost_payload' in params:
            body_params = params['transaction_controlspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TransactionControlspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def posttransaction_controls_by_pan(self, transaction_controls_by_panpost_payload, **kwargs):
        """
        Get a Control Document List by a PrimaryAccountNumber
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.posttransaction_controls_by_pan(transaction_controls_by_panpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TransactionControlsByPanpostPayload transaction_controls_by_panpost_payload: request (required)
        :return: TransactionControlsByPanpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.posttransaction_controls_by_pan_with_http_info(transaction_controls_by_panpost_payload, **kwargs)
        else:
            (data) = self.posttransaction_controls_by_pan_with_http_info(transaction_controls_by_panpost_payload, **kwargs)
            return data

    def posttransaction_controls_by_pan_with_http_info(self, transaction_controls_by_panpost_payload, **kwargs):
        """
        Get a Control Document List by a PrimaryAccountNumber
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.posttransaction_controls_by_pan_with_http_info(transaction_controls_by_panpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TransactionControlsByPanpostPayload transaction_controls_by_panpost_payload: request (required)
        :return: TransactionControlsByPanpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_controls_by_panpost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posttransaction_controls_by_pan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_controls_by_panpost_payload' is set
        if ('transaction_controls_by_panpost_payload' not in params) or (params['transaction_controls_by_panpost_payload'] is None):
            raise ValueError("Missing the required parameter `transaction_controls_by_panpost_payload` when calling `posttransaction_controls_by_pan`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/inquiries/cardinquiry'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/inquiries/cardinquiry'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transaction_controls_by_panpost_payload' in params:
            body_params = params['transaction_controls_by_panpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TransactionControlsByPanpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postvtc_registration(self, vtc_registrationpost_payload, **kwargs):
        """
        Enroll an account in Visa Transaction Controls (VTC)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postvtc_registration(vtc_registrationpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VtcRegistrationpostPayload vtc_registrationpost_payload: request (required)
        :return: VtcRegistrationpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postvtc_registration_with_http_info(vtc_registrationpost_payload, **kwargs)
        else:
            (data) = self.postvtc_registration_with_http_info(vtc_registrationpost_payload, **kwargs)
            return data

    def postvtc_registration_with_http_info(self, vtc_registrationpost_payload, **kwargs):
        """
        Enroll an account in Visa Transaction Controls (VTC)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postvtc_registration_with_http_info(vtc_registrationpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VtcRegistrationpostPayload vtc_registrationpost_payload: request (required)
        :return: VtcRegistrationpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vtc_registrationpost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postvtc_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vtc_registrationpost_payload' is set
        if ('vtc_registrationpost_payload' not in params) or (params['vtc_registrationpost_payload'] is None):
            raise ValueError("Missing the required parameter `vtc_registrationpost_payload` when calling `postvtc_registration`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vtc_registrationpost_payload' in params:
            body_params = params['vtc_registrationpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VtcRegistrationpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def putapplication_configuration(self, application_configurationput_payload, **kwargs):
        """
        Update the App's configuration data for notification callback settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.putapplication_configuration(application_configurationput_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationConfigurationputPayload application_configurationput_payload: callBackSettingsRequest (required)
        :return: ApplicationConfigurationputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.putapplication_configuration_with_http_info(application_configurationput_payload, **kwargs)
        else:
            (data) = self.putapplication_configuration_with_http_info(application_configurationput_payload, **kwargs)
            return data

    def putapplication_configuration_with_http_info(self, application_configurationput_payload, **kwargs):
        """
        Update the App's configuration data for notification callback settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.putapplication_configuration_with_http_info(application_configurationput_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationConfigurationputPayload application_configurationput_payload: callBackSettingsRequest (required)
        :return: ApplicationConfigurationputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_configurationput_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method putapplication_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_configurationput_payload' is set
        if ('application_configurationput_payload' not in params) or (params['application_configurationput_payload'] is None):
            raise ValueError("Missing the required parameter `application_configurationput_payload` when calling `putapplication_configuration`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/applications/configuration'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/applications/configuration'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_configurationput_payload' in params:
            body_params = params['application_configurationput_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationConfigurationputResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def putmanage_controls(self, document_id, manage_controlsput_payload, **kwargs):
        """
        Update the existing details of a Control Document
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.putmanage_controls(document_id, manage_controlsput_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document to be updated. (required)
        :param ManageControlsputPayload manage_controlsput_payload: request (required)
        :return: ManageControlsputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.putmanage_controls_with_http_info(document_id, manage_controlsput_payload, **kwargs)
        else:
            (data) = self.putmanage_controls_with_http_info(document_id, manage_controlsput_payload, **kwargs)
            return data

    def putmanage_controls_with_http_info(self, document_id, manage_controlsput_payload, **kwargs):
        """
        Update the existing details of a Control Document
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.putmanage_controls_with_http_info(document_id, manage_controlsput_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str document_id: The documentID of the control document to be updated. (required)
        :param ManageControlsputPayload manage_controlsput_payload: request (required)
        :return: ManageControlsputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id', 'manage_controlsput_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method putmanage_controls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `putmanage_controls`")
        # verify the required parameter 'manage_controlsput_payload' is set
        if ('manage_controlsput_payload' not in params) or (params['manage_controlsput_payload'] is None):
            raise ValueError("Missing the required parameter `manage_controlsput_payload` when calling `putmanage_controls`")


        collection_formats = {}

        path = '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules'.replace('{format}', 'json')
        resource_path = 'consumertransactioncontrols/{documentID}/rules'
        path_params = {}
        if 'document_id' in params:
            path_params['documentID'] = params['document_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'manage_controlsput_payload' in params:
            body_params = params['manage_controlsput_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ManageControlsputResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------