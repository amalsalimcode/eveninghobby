# coding: utf-8

"""
    Customer Rules API

    The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest
import datetime
import pytz
import random
import string
import re
import json

from src.apis.customer_rules_api import CustomerRulesApi
from src.configuration import Configuration
from globalConfig import GlobalConfig


class TestCustomerRulesApi(unittest.TestCase):
    """ CustomerRulesApi unit test stubs """

    @classmethod
    def setUpClass(self):
        print("---------------------------------------Tests---------------------------------------\nProduct Name: Visa Transaction Controls\nApi Name: Customer Rules API")
        globalConfig = GlobalConfig()
        config = Configuration()
        config.username = globalConfig.userName
        config.password = globalConfig.password
        config.cert_file = globalConfig.certificatePath
        config.key_file = globalConfig.privateKeyPath
        config.shared_secret = globalConfig.sharedSecret
        config.api_key['apikey'] = globalConfig.apiKey
        config.ssl_ca_cert = globalConfig.caCertPath
        config.proxy_url = globalConfig.proxyUrl
        self.api = CustomerRulesApi(None)

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def transformPayload(self, payload):
        payload = self.editLocalTime(payload)
        payload = self.addRandom(payload)
        payload = json.loads(payload)
        return payload

    def editLocalTime(self, payload):
        timezone = pytz.timezone("America/Los_Angeles")
        timestamp = timezone.localize(datetime.datetime.now()).strftime('%Y-%m-%dT%H:%M:%S')
        pattern = re.compile('"localTransactionDateTime":".{19}"', re.IGNORECASE)
        replacement = '"localTransactionDateTime": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)

        timestamp = timezone.localize(datetime.datetime.now()).strftime('%m%d%H%M%S')
        pattern = re.compile('"dateTimeLocal":".{10}"', re.IGNORECASE)
        replacement = '"dateTimeLocal": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)
        return payload

    def addRandom(self, payload):
        if payload == 'mle_keyId':
            return self.mleKeyId
        payload = re.sub(r'random_string', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        payload = re.sub(r'random_integer', ''.join(random.choice(string.digits) for _ in range(8)), payload)
        payload= re.sub(r'random', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        return payload

    """
    Test case for deletecard_replacement

    .
    """
    def testdeletecard_replacement(self):
        print("\ndeletecard_replacement")
        result = self.api.deletecard_replacement(self.transformPayload('{"primaryAccountNumber":"4514170000000002"}'))
        pass

    """
    Test case for deletedelete_control_document_by_doc_id

    .
    """
    def testdeletedelete_control_document_by_doc_id(self):
        print("\ndeletedelete_control_document_by_doc_id")
        result = self.api.deletedelete_control_document_by_doc_id(self.addRandom('random'))
        pass

    """
    Test case for deletemanage_controls

    .
    """
    def testdeletemanage_controls(self):
        print("\ndeletemanage_controls")
        result = self.api.deletemanage_controls(self.addRandom('random'), self.transformPayload('{"transactionControls":[{"isControlEnabled":true,"shouldAlertOnDecline":false,"alertThreshold":10,"declineThreshold":200,"controlType":"TCT_E_COMMERCE","userIdentifier":"abhi-539d-4f93-ba00-77ef9ff873a2","shouldDeclineAll":false}]}'))
        pass

    """
    Test case for getapplication_configuration

    .
    """
    def testgetapplication_configuration(self):
        print("\ngetapplication_configuration")
        result = self.api.getapplication_configuration()
        pass

    """
    Test case for getmanage_controls

    .
    """
    def testgetmanage_controls(self):
        print("\ngetmanage_controls")
        result = self.api.getmanage_controls(self.addRandom('random'), )
        pass

    """
    Test case for gettransaction_control_document_history

    .
    """
    def testgettransaction_control_document_history(self):
        print("\ngettransaction_control_document_history")
        result = self.api.gettransaction_control_document_history(self.addRandom('random'))
        pass

    """
    Test case for postbatch_enrollment

    .
    """
    def testpostbatch_enrollment(self):
        print("\npostbatch_enrollment")
        result = self.api.postbatch_enrollment(self.addRandom('random'), self.addRandom('random'), self.transformPayload('{"enrolledCards":[{"accountIdentifier":"4321000001001000001","userIdentifier":"abc@visa.com"},{"accountIdentifier":"4321000001001000002"}],"cardsType":"PAN","controlRules":{"transactionControls":[{"isControlEnabled":true,"shouldAlertOnDecline":true,"alertThreshold":10,"declineThreshold":100,"controlType":"TCT_ATM_WITHDRAW","shouldDeclineAll":false}],"globalControl":{"alertThreshold":10,"shouldDeclineAll":false,"shouldAlertOnDecline":true,"isControlEnabled":true,"declineThreshold":100}},"forceEnrollment":true}'), )
        pass

    """
    Test case for postcard_replacement

    .
    """
    def testpostcard_replacement(self):
        print("\npostcard_replacement")
        result = self.api.postcard_replacement(self.transformPayload('{"newAccountID":"4514170000000002","currentAccountID":"4514170000000001"}'))
        pass

    """
    Test case for postconfiguration_cardinquiry

    .
    """
    def testpostconfiguration_cardinquiry(self):
        print("\npostconfiguration_cardinquiry")
        result = self.api.postconfiguration_cardinquiry(self.transformPayload('{"primaryAccountNumber":"4514170000000001"}'))
        pass

    """
    Test case for postdecouple_tokens

    .
    """
    def testpostdecouple_tokens(self):
        print("\npostdecouple_tokens")
        result = self.api.postdecouple_tokens(self.addRandom('random'), self.transformPayload('{"decoupleTokenRequest":[{"primaryAccountNumber":"4154710000000003","shouldDecouple":true,"paymentToken":"4514170000000002"}]}'), )
        pass

    """
    Test case for postmanage_controls

    .
    """
    def testpostmanage_controls(self):
        print("\npostmanage_controls")
        result = self.api.postmanage_controls(self.addRandom('random'), self.transformPayload('{"globalControls":[{"shouldDeclineAll":false,"isControlEnabled":true,"shouldAlertOnDecline":false,"alertThreshold":15,"userIdentifier":"abhi-539d-4f93-ba00-77ef9ff873a2"}]}'))
        pass

    """
    Test case for postmerchant_type_controls_card_inquiry

    .
    """
    def testpostmerchant_type_controls_card_inquiry(self):
        print("\npostmerchant_type_controls_card_inquiry")
        result = self.api.postmerchant_type_controls_card_inquiry(self.transformPayload('{"primaryAccountNumber":"4514170000000001"}'))
        pass

    """
    Test case for postmobile_wallet_services

    .
    """
    def testpostmobile_wallet_services(self):
        print("\npostmobile_wallet_services")
        result = self.api.postmobile_wallet_services(self.transformPayload('{"primaryAccountNumbers":["4514170000000002"],"documentIDs":["ctc-ip-98b195ed-138f-49a5-bc4e-cdc986e79960","ctc-ip-98b195ed-138f-49a5-bc4e-cdc986e79960"]}'))
        pass

    """
    Test case for posttransaction_control_history_by_document_id

    .
    """
    def testposttransaction_control_history_by_document_id(self):
        print("\nposttransaction_control_history_by_document_id")
        result = self.api.posttransaction_control_history_by_document_id(self.transformPayload('{"primaryAccountNumber":"4514170000000001"}'))
        pass

    """
    Test case for posttransaction_controls

    .
    """
    def testposttransaction_controls(self):
        print("\nposttransaction_controls")
        result = self.api.posttransaction_controls(self.transformPayload('{"primaryAccountNumber":"4514170000000001"}'))
        pass

    """
    Test case for posttransaction_controls_by_pan

    .
    """
    def testposttransaction_controls_by_pan(self):
        print("\nposttransaction_controls_by_pan")
        result = self.api.posttransaction_controls_by_pan(self.transformPayload('{"primaryAccountNumber":"4514170000000001"}'))
        pass

    """
    Test case for postvtc_registration

    .
    """
    def testpostvtc_registration(self):
        print("\npostvtc_registration")
        result = self.api.postvtc_registration(self.transformPayload('{"primaryAccountNumber":"4514170000000001"}'))
        pass

    """
    Test case for putapplication_configuration

    .
    """
    def testputapplication_configuration(self):
        print("\nputapplication_configuration")
        result = self.api.putapplication_configuration(self.transformPayload('{"callBackSettings":{"iscallBackEndpointLocal":true,"callBackEndpoint":"https://abc/com/enrollment","isCallBackDisabled":true}}'))
        pass

    """
    Test case for putmanage_controls

    .
    """
    def testputmanage_controls(self):
        print("\nputmanage_controls")
        result = self.api.putmanage_controls(self.addRandom('random'), self.transformPayload('{"transactionControls":[{"isControlEnabled":true,"shouldAlertOnDecline":false,"alertThreshold":10,"declineThreshold":200,"controlType":"TCT_E_COMMERCE","userIdentifier":"abhi-539d-4f93-ba00-77ef9ff873a2","shouldDeclineAll":false},{"isControlEnabled":true,"shouldAlertOnDecline":false,"alertThreshold":10,"declineThreshold":200,"controlType":"TCT_ATM_WITHDRAW","userIdentifier":"abhi-539d-4f93-ba00-77ef9ff873a2","shouldDeclineAll":false}]}'))
        pass


if __name__ == '__main__':
    unittest.main()


# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------