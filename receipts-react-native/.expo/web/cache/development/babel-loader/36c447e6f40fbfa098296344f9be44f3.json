{"ast":null,"code":"import constants from \"../components/common/constants\";\nimport { getStartOfWeek } from \"../components/transactions/utils\";\nvar initial_data = {\n  bar_data: [],\n  meta_data: {\n    dataLoaded: false,\n    fullDate: getStartOfWeek(null)\n  }\n};\nvar idx = 0;\n\nfor (idx = 0; idx < constants.diffDays; idx++) {\n  initial_data.bar_data.push({\n    transaction_data: [],\n    idx: idx\n  });\n}\n\nfunction set_trans_data(state, response_data) {\n  for (var _idx = 0; _idx < response_data.length; _idx++) {\n    var diff_days = response_data[_idx][\"diff\"];\n    state.bar_data[diff_days].transaction_data.push(response_data[_idx]);\n  }\n\n  state.meta_data.dataLoaded = true;\n}\n\nfunction clear_trans_data(state) {\n  var idx = 0;\n\n  for (idx = 0; idx < state.bar_data.length; idx++) {\n    state.bar_data[idx].transaction_data.length = 0;\n  }\n}\n\nvar TransactionsReducer = function TransactionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_data;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var state_cpy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case \"SET_TRANSACTION_DATA\":\n      clear_trans_data(state_cpy);\n      set_trans_data(state_cpy, action.transactions);\n      return state_cpy;\n\n    case \"ADD_SUB_CUR_WEEK\":\n      var dt = new Date(state_cpy.meta_data.fullDate);\n      dt.setDate(dt.getDate() + constants.diffDays * action.direction);\n      state_cpy.meta_data.fullDate = dt.toString();\n      return state_cpy;\n\n    case \"SET_CUR_WEEK\":\n      state_cpy.meta_data.fullDate = action.newDate;\n      return state_cpy;\n  }\n\n  return state;\n};\n\nexport default TransactionsReducer;","map":{"version":3,"sources":["/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/reducers/TransactionsReducer.js"],"names":["constants","getStartOfWeek","initial_data","bar_data","meta_data","dataLoaded","fullDate","idx","diffDays","push","transaction_data","set_trans_data","state","response_data","length","diff_days","clear_trans_data","TransactionsReducer","action","state_cpy","JSON","parse","stringify","type","transactions","dt","Date","setDate","getDate","direction","toString","newDate"],"mappings":"AAAA,OAAOA,SAAP;AACA,SAASC,cAAT;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE,EADK;AAEfC,EAAAA,SAAS,EAAE;AACPC,IAAAA,UAAU,EAAE,KADL;AAEPC,IAAAA,QAAQ,EAAEL,cAAc,CAAC,IAAD;AAFjB;AAFI,CAAnB;AAQA,IAAIM,GAAG,GAAG,CAAV;;AACA,KAAKA,GAAG,GAAG,CAAX,EAAcA,GAAG,GAAGP,SAAS,CAACQ,QAA9B,EAAwCD,GAAG,EAA3C,EAA+C;AAC3CL,EAAAA,YAAY,CAACC,QAAb,CAAsBM,IAAtB,CAA2B;AACvBC,IAAAA,gBAAgB,EAAE,EADK;AAEvBH,IAAAA,GAAG,EAAEA;AAFkB,GAA3B;AAIH;;AAED,SAASI,cAAT,CAAwBC,KAAxB,EAA+BC,aAA/B,EAA8C;AAC1C,OAAK,IAAIN,IAAG,GAAG,CAAf,EAAkBA,IAAG,GAAGM,aAAa,CAACC,MAAtC,EAA8CP,IAAG,EAAjD,EAAqD;AACjD,QAAIQ,SAAS,GAAGF,aAAa,CAACN,IAAD,CAAb,CAAmB,MAAnB,CAAhB;AACAK,IAAAA,KAAK,CAACT,QAAN,CAAeY,SAAf,EAA0BL,gBAA1B,CAA2CD,IAA3C,CAAgDI,aAAa,CAACN,IAAD,CAA7D;AACH;;AACDK,EAAAA,KAAK,CAACR,SAAN,CAAgBC,UAAhB,GAA6B,IAA7B;AACH;;AAED,SAASW,gBAAT,CAA0BJ,KAA1B,EAAiC;AAC7B,MAAIL,GAAG,GAAG,CAAV;;AACA,OAAKA,GAAG,GAAG,CAAX,EAAcA,GAAG,GAAGK,KAAK,CAACT,QAAN,CAAeW,MAAnC,EAA2CP,GAAG,EAA9C,EAAkD;AAC9CK,IAAAA,KAAK,CAACT,QAAN,CAAeI,GAAf,EAAoBG,gBAApB,CAAqCI,MAArC,GAA8C,CAA9C;AACH;AACJ;;AAED,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAkC;AAAA,MAAjCL,KAAiC,uEAAzBV,YAAyB;AAAA,MAAXgB,MAAW;AAC1D,MAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeV,KAAf,CAAX,CAAhB;;AACA,UAAQM,MAAM,CAACK,IAAf;AAEI,SAAK,sBAAL;AACIP,MAAAA,gBAAgB,CAACG,SAAD,CAAhB;AACAR,MAAAA,cAAc,CAACQ,SAAD,EAAYD,MAAM,CAACM,YAAnB,CAAd;AAGA,aAAOL,SAAP;;AAEJ,SAAK,kBAAL;AACI,UAAIM,EAAE,GAAG,IAAIC,IAAJ,CAASP,SAAS,CAACf,SAAV,CAAoBE,QAA7B,CAAT;AACAmB,MAAAA,EAAE,CAACE,OAAH,CAAWF,EAAE,CAACG,OAAH,KAAe5B,SAAS,CAACQ,QAAV,GAAqBU,MAAM,CAACW,SAAtD;AACAV,MAAAA,SAAS,CAACf,SAAV,CAAoBE,QAApB,GAA+BmB,EAAE,CAACK,QAAH,EAA/B;AACA,aAAOX,SAAP;;AAEJ,SAAK,cAAL;AACIA,MAAAA,SAAS,CAACf,SAAV,CAAoBE,QAApB,GAA+BY,MAAM,CAACa,OAAtC;AACA,aAAOZ,SAAP;AAjBR;;AAmBA,SAAOP,KAAP;AACH,CAtBD;;AAyBA,eAAeK,mBAAf","sourcesContent":["import constants from '../components/common/constants'\nimport { getStartOfWeek } from '../components/transactions/utils';\n\nlet initial_data = {\n    bar_data: [],\n    meta_data: {\n        dataLoaded: false,\n        fullDate: getStartOfWeek(null)\n    }\n}\n\nlet idx = 0;\nfor (idx = 0; idx < constants.diffDays; idx++) {\n    initial_data.bar_data.push({\n        transaction_data: [],\n        idx: idx\n    })\n}\n\nfunction set_trans_data(state, response_data) {\n    for (let idx = 0; idx < response_data.length; idx++) {\n        var diff_days = response_data[idx][\"diff\"]\n        state.bar_data[diff_days].transaction_data.push(response_data[idx])\n    }\n    state.meta_data.dataLoaded = true\n}\n\nfunction clear_trans_data(state) {\n    let idx = 0\n    for (idx = 0; idx < state.bar_data.length; idx++) {\n        state.bar_data[idx].transaction_data.length = 0\n    }\n}\n\nconst TransactionsReducer = (state = initial_data, action) => {\n    var state_cpy = JSON.parse(JSON.stringify(state))\n    switch (action.type) {\n\n        case \"SET_TRANSACTION_DATA\":\n            clear_trans_data(state_cpy)\n            set_trans_data(state_cpy, action.transactions)\n            // ack that data from backend is received\n            // now the components can load\n            return state_cpy\n\n        case \"ADD_SUB_CUR_WEEK\":\n            var dt = new Date(state_cpy.meta_data.fullDate);\n            dt.setDate(dt.getDate() + constants.diffDays * action.direction);\n            state_cpy.meta_data.fullDate = dt.toString()\n            return state_cpy\n\n        case \"SET_CUR_WEEK\":\n            state_cpy.meta_data.fullDate = action.newDate\n            return state_cpy\n    }\n    return state\n}\n\n\nexport default TransactionsReducer;\n"]},"metadata":{},"sourceType":"module"}