{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/transactions/graph/SingleBarGraph.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport { connect } from 'react-redux';\nimport { isAccountEnabled, isAnyAccountPressed } from \"../utils\";\n\nvar SingleBarGraph = function SingleBarGraph(props) {\n  var fadeAnim = useRef(new Animated.Value(0)).current;\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressOpacity = _useState2[0],\n      setPressOpacity = _useState2[1];\n\n  useEffect(function () {\n    height = props.expensePerDay[props.uuid] ? props.expensePerDay[props.uuid] : 0;\n    var highest = props.highestSpent;\n\n    if (highest != 0 && height != 0) {\n      height = height * 80 / highest + 20;\n    }\n\n    Animated.timing(fadeAnim, {\n      toValue: height,\n      duration: 1000\n    }).start();\n  }, []);\n\n  function bar_pressed() {\n    pressOpacity > 0.5 ? setPressOpacity(0.5) : setPressOpacity(1);\n    props.barButtonPressed(props.uuid);\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      bar_pressed();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(Animated.View, {\n    style: _objectSpread(_objectSpread({}, styles.bar), {}, {\n      height: fadeAnim,\n      opacity: pressOpacity\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  bar: {\n    marginHorizontal: 20,\n    backgroundColor: \"brown\",\n    width: 10,\n    height: 90,\n    marginBottom: 1,\n    elevation: 2,\n    borderRadius: 8,\n    shadowColor: \"brown\",\n    shadowOffset: {\n      width: 10,\n      height: -10\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 1\n  }\n});\n\nfunction mapStateToProps(state) {\n  return {\n    expensePerDay: state.BarSummaryReducer.expensePerDay,\n    highestSpent: state.BarSummaryReducer.highestSpent,\n    enabledBars: state.BarGraphReducer.enabledBars,\n    curDate: state.TransactionsReducer.meta_data.fullDate,\n    enabledAccounts: state.EnabledAccountsReducer.enabledAccounts\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    barButtonPressed: function barButtonPressed(uuid) {\n      return dispatch({\n        type: 'TOGGLE_BAR',\n        uuid: uuid\n      });\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleBarGraph);","map":{"version":3,"sources":["/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/transactions/graph/SingleBarGraph.js"],"names":["React","useRef","useEffect","useState","TouchableWithoutFeedback","connect","isAccountEnabled","isAnyAccountPressed","SingleBarGraph","props","fadeAnim","Animated","Value","current","pressOpacity","setPressOpacity","height","expensePerDay","uuid","highest","highestSpent","timing","toValue","duration","start","bar_pressed","barButtonPressed","styles","bar","opacity","StyleSheet","create","marginHorizontal","backgroundColor","width","marginBottom","elevation","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","mapStateToProps","state","BarSummaryReducer","enabledBars","BarGraphReducer","curDate","TransactionsReducer","meta_data","fullDate","enabledAccounts","EnabledAccountsReducer","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Animated, StyleSheet } from 'react-native'\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport { connect } from 'react-redux'\nimport { isAccountEnabled, isAnyAccountPressed } from '../utils';\n\nconst SingleBarGraph = props => {\n\n    const fadeAnim = useRef(new Animated.Value(0)).current;\n    const [pressOpacity, setPressOpacity] = useState(1)\n\n    /*\n     * only update component if the height\n     * of the bar has changed\n     */\n    useEffect(() => {\n        /* smallest possible height for a transaction\n         * is 20. Otherwise, its not visible.\n         * maximum allowed height is 100. Otherwise,\n         * it goes off screen. */\n        height = props.expensePerDay[props.uuid] ? props.expensePerDay[props.uuid] : 0\n\n        // var height = props.expensePerDay[props.uuid]\n        var highest = props.highestSpent\n\n        if (highest != 0 && height != 0) {\n            height = (height * (80) / (highest)) + 20\n        }\n\n        Animated.timing(fadeAnim, {\n            toValue: height,\n            duration: 1000\n        }).start()\n    }, []);\n\n    function bar_pressed() {\n        pressOpacity > 0.5 ? setPressOpacity(0.5) : setPressOpacity(1)\n        props.barButtonPressed(props.uuid)\n    }\n\n    return (\n        <TouchableWithoutFeedback onPress={() => { bar_pressed() }}>\n            <Animated.View style={{ ...styles.bar, height: fadeAnim, opacity: pressOpacity }} />\n        </TouchableWithoutFeedback>\n    )\n\n}\n\nconst styles = StyleSheet.create({\n    bar: {\n        marginHorizontal: 20,\n        backgroundColor: \"brown\",\n        width: 10,\n        height: 90,\n        marginBottom: 1,\n        elevation: 2, // Android\n        borderRadius: 8,\n        shadowColor: \"brown\",\n        shadowOffset: {\n            width: 10,\n            height: -10\n        },\n        shadowOpacity: 0.5,\n        // increase this to see the effect\n        shadowRadius: 1\n    },\n});\n\nfunction mapStateToProps(state) {\n    return {\n        expensePerDay: state.BarSummaryReducer.expensePerDay,\n        highestSpent: state.BarSummaryReducer.highestSpent,\n        enabledBars: state.BarGraphReducer.enabledBars,\n        curDate: state.TransactionsReducer.meta_data.fullDate,\n        enabledAccounts: state.EnabledAccountsReducer.enabledAccounts\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        barButtonPressed: (uuid) => dispatch({ type: 'TOGGLE_BAR', uuid: uuid }),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleBarGraph)"]},"metadata":{},"sourceType":"module"}