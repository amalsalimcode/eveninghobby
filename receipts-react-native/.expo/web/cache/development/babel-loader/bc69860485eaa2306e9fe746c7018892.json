{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/referenceComponents/ImgPicker.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport { Camera } from 'expo-camera';\nexport default function ImgPicker() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newImg = _useState4[0],\n      setNewImg = _useState4[1];\n\n  console.log(\"This is what i have\", newImg);\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!Constants.platform.ios) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var getImage = function getImage() {\n    var request_body;\n    return _regeneratorRuntime.async(function getImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"im here\");\n            request_body = JSON.stringify({\n              \"test\": \"testVal\"\n            });\n            fetch('http://127.0.0.1:8000/account/receipt', {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: request_body\n            }).then(function (response) {\n              return response.json();\n            }).then(function (json) {\n              setNewImg(json[\"image\"]);\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var snap = function snap() {\n    var result, localUri, filename, match, type, formData;\n    return _regeneratorRuntime.async(function snap$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync({\n              allowsEditing: true,\n              aspect: [4, 3]\n            }));\n\n          case 2:\n            result = _context3.sent;\n\n            if (!result.cancelled) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 5:\n            localUri = result.uri;\n            filename = localUri.split('/').pop();\n            match = /\\.(\\w+)$/.exec(filename);\n            type = match ? \"image/\" + match[1] : \"image\";\n            formData = new FormData();\n            console.log(\"here is the type\", type);\n            formData.append('photo', {\n              uri: localUri,\n              name: filename,\n              type: type\n            });\n            _context3.next = 14;\n            return _regeneratorRuntime.awrap(fetch(YOUR_SERVER_URL, {\n              method: 'POST',\n              body: formData,\n              headers: {\n                'content-type': 'multipart/form-data'\n              }\n            }));\n\n          case 14:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context4.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function takeAndUploadPhotoAsync() {\n    var photo, localUri, filename, match, type, formData;\n    return _regeneratorRuntime.async(function takeAndUploadPhotoAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(cam.takePictureAsync());\n\n          case 2:\n            photo = _context5.sent;\n            localUri = photo[\"uri\"];\n            filename = localUri.split('/').pop();\n            match = /\\.(\\w+)$/.exec(filename);\n            type = match ? \"image/\" + match[1] : \"image\";\n            formData = new FormData();\n            formData.append('image', {\n              uri: image ? image : localUri,\n              name: 'test.jpg',\n              type: type\n            });\n            console.log(formData);\n            _context5.next = 12;\n            return _regeneratorRuntime.awrap(fetch('http://127.0.0.1:8000/account/receipt', {\n              method: 'POST',\n              body: formData,\n              headers: {\n                'content-type': 'multipart/form-data'\n              }\n            }));\n\n          case 12:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }), React.createElement(Camera, {\n    style: {\n      height: 300,\n      width: 300\n    },\n    type: Camera.Constants.Type.back,\n    ref: function ref(camera) {\n      return cam = camera;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Say Cheese\",\n    onPress: takeAndUploadPhotoAsync,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Get a picker from Backend\",\n    onPress: getImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 23\n    }\n  }), newImg && React.createElement(Image, {\n    style: {\n      height: 200,\n      width: 200\n    },\n    source: {\n      uri: newImg\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 24\n    }\n  }), React.createElement(Image, {\n    style: {\n      height: 200,\n      width: 200\n    },\n    source: {\n      uri: \"http://127.0.0.1:8000/account/receipt\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/referenceComponents/ImgPicker.js"],"names":["React","useState","useEffect","ImagePicker","Constants","Camera","ImgPicker","image","setImage","newImg","setNewImg","console","log","platform","ios","requestCameraRollPermissionsAsync","status","alert","getImage","request_body","JSON","stringify","fetch","method","headers","Accept","body","then","response","json","snap","launchCameraAsync","allowsEditing","aspect","result","cancelled","localUri","uri","filename","split","pop","match","exec","type","formData","FormData","append","name","YOUR_SERVER_URL","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","quality","takeAndUploadPhotoAsync","cam","takePictureAsync","photo","flex","alignItems","justifyContent","height","width","Type","back","camera"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Image, View } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport { Camera } from 'expo-camera';\n\nexport default function ImgPicker() {\n    const [image, setImage] = useState(null);\n    const [newImg, setNewImg] = useState(null);\n\n    console.log(\"This is what i have\", newImg)\n\n    useEffect(() => {\n        (async () => {\n            if (Constants.platform.ios) {\n                const { status } = await ImagePicker.requestCameraRollPermissionsAsync();\n                if (status !== 'granted') {\n                    alert('Sorry, we need camera roll permissions to make this work!');\n                }\n            }\n        })();\n    }, []);\n\n\n    const getImage = async () => {\n        console.log(\"im here\")\n\n        var request_body = JSON.stringify({\n            \"test\": \"testVal\"\n        })\n\n        fetch('http://127.0.0.1:8000/account/receipt', {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: request_body\n        }).then((response) => response.json())\n            .then((json) => { setNewImg(json[\"image\"]) })\n\n    }\n\n    const snap = async () => {\n        // Display the camera to the user and wait for them to take a photo or to cancel\n        // the action\n        let result = await ImagePicker.launchCameraAsync({\n            allowsEditing: true,\n            aspect: [4, 3],\n        });\n\n        if (result.cancelled) {\n            return;\n        }\n\n        // ImagePicker saves the taken photo to disk and returns a local URI to it\n        let localUri = result.uri;\n        let filename = localUri.split('/').pop();\n\n        // Infer the type of the image\n        let match = /\\.(\\w+)$/.exec(filename);\n        let type = match ? `image/${match[1]}` : `image`;\n\n        // Upload the image using the fetch and FormData APIs\n        let formData = new FormData();\n        // Assume \"photo\" is the name of the form field the server expects\n        console.log(\"here is the type\", type)\n        formData.append('photo', { uri: localUri, name: filename, type: type });\n\n        return await fetch(YOUR_SERVER_URL, {\n            method: 'POST',\n            body: formData,\n            headers: {\n                'content-type': 'multipart/form-data',\n            },\n        });\n    }\n\n\n    const pickImage = async () => {\n        let result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [4, 3],\n            quality: 1,\n        });\n\n        console.log(result);\n\n        if (!result.cancelled) {\n            setImage(result.uri);\n        }\n    };\n\n    async function takeAndUploadPhotoAsync() {\n        let photo = await cam.takePictureAsync()\n\n\n        // ImagePicker saves the taken photo to disk and returns a local URI to it\n        let localUri = photo[\"uri\"];\n        let filename = localUri.split('/').pop();\n\n        // Infer the type of the image\n        let match = /\\.(\\w+)$/.exec(filename);\n        let type = match ? `image/${match[1]}` : `image`;\n\n        // Upload the image using the fetch and FormData APIs\n        let formData = new FormData();\n        // Assume \"photo\" is the name of the form field the server expects\n        formData.append('image', { uri: image ? image : localUri, name: 'test.jpg', type: type });\n\n        console.log(formData)\n\n        return await fetch('http://127.0.0.1:8000/account/receipt', {\n            method: 'POST',\n            body: formData,\n            headers: {\n                'content-type': 'multipart/form-data',\n            },\n        });\n    }\n\n    return (\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n            <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n\n            <Camera style={{ height: 300, width: 300 }} type={Camera.Constants.Type.back}\n                ref={camera => cam = camera}>\n            </Camera>\n            <Button title=\"Say Cheese\" onPress={takeAndUploadPhotoAsync} />\n\n            <Button title=\"Get a picker from Backend\" onPress={getImage} />\n            {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n            {newImg && <Image style={{ height: 200, width: 200 }} source={{ uri: newImg }} />}\n            <Image\n                style={{height: 200, width: 200}}\n                source={{\n                    uri: \"http://127.0.0.1:8000/account/receipt\"\n                }}\n            />\n        </View>\n    );\n}"]},"metadata":{},"sourceType":"module"}