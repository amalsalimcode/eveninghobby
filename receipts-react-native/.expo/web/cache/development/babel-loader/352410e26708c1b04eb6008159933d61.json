{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport constants from \"../components/common/constants\";\nimport { isBarEnabled, isAccountEnabled, isAnyAccountPressed } from \"../components/transactions/utils\";\nvar initial_data = {\n  expensePerDay: Array(constants.diffDays),\n  totalSpent: 0,\n  highestSpent: 0,\n  expensePerAccount: {},\n  serverData: undefined,\n  dataLoaded: false\n};\n\nvar arrSum = function arrSum(arr) {\n  return arr.reduce(function (a, b) {\n    return a + b;\n  }, 0);\n};\n\nvar BarSummaryReducer = function BarSummaryReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_data;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var state_cpy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case \"SET_ALL_TOTAL_EXPENSES\":\n      var expensePerAccount = {};\n      var expensePerDay = [];\n\n      for (var idx = 0; idx < action.data.length; idx++) {\n        var total = 0;\n\n        for (key in action.data[idx]) {\n          if (!expensePerAccount[key]) {\n            expensePerAccount[key] = 0;\n          }\n\n          expensePerAccount[key] += action.data[idx][key];\n          total += action.data[idx][key];\n        }\n\n        expensePerDay.push(total);\n      }\n\n      state_cpy.serverData = action.data;\n      state_cpy.expensePerDay = expensePerDay;\n      state_cpy.highestSpent = Math.max.apply(Math, _toConsumableArray(state_cpy.expensePerDay));\n      state_cpy.totalSpent = arrSum(expensePerDay).toFixed(2);\n      state_cpy.expensePerAccount = expensePerAccount;\n      state_cpy.dataLoaded = true;\n      return state_cpy;\n\n    case \"SET_ALL_TOTAL_EXPENSES_CACHE\":\n      var expensePerAccount = {};\n      var expensePerDay = [];\n\n      for (var _idx = 0; _idx < action.data.length; _idx++) {\n        if (!isBarEnabled(action.enabledBars, _idx)) {\n          expensePerDay.push(0);\n          continue;\n        }\n\n        var total = 0;\n\n        for (key in action.data[_idx]) {\n          if (!expensePerAccount[key]) {\n            expensePerAccount[key] = 0;\n          }\n\n          expensePerAccount[key] += action.data[_idx][key];\n\n          if (isAccountEnabled(action.enabledAccounts, key)) {\n            total += action.data[_idx][key];\n          }\n        }\n\n        expensePerDay.push(total);\n      }\n\n      state_cpy.highestSpent = Math.max.apply(Math, _toConsumableArray(state_cpy.expensePerDay));\n      state_cpy.totalSpent = arrSum(expensePerDay).toFixed(2);\n      state_cpy.expensePerAccount = expensePerAccount;\n      return state_cpy;\n\n    case \"CLEAR_TOTAL_EXPENSES_LOADED\":\n      state_cpy.dataLoaded = false;\n      return state_cpy;\n  }\n\n  return state;\n};\n\nexport default BarSummaryReducer;","map":{"version":3,"sources":["/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/reducers/BarSummaryReducer.js"],"names":["constants","isBarEnabled","isAccountEnabled","isAnyAccountPressed","initial_data","expensePerDay","Array","diffDays","totalSpent","highestSpent","expensePerAccount","serverData","undefined","dataLoaded","arrSum","arr","reduce","a","b","BarSummaryReducer","state","action","state_cpy","JSON","parse","stringify","type","idx","data","length","total","key","push","Math","max","toFixed","enabledBars","enabledAccounts"],"mappings":"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","sourcesContent":["import constants from '../components/common/constants'\nimport { isBarEnabled, isAccountEnabled, isAnyAccountPressed } from \"../components/transactions/utils\"\n\nlet initial_data = {\n    expensePerDay: Array(constants.diffDays),\n    totalSpent: 0,\n    highestSpent: 0,\n    expensePerAccount: {},\n    serverData: undefined,\n    dataLoaded: false\n}\n\nconst arrSum = arr => arr.reduce((a, b) => a + b, 0)\n\nconst BarSummaryReducer = (state = initial_data, action) => {\n    var state_cpy = JSON.parse(JSON.stringify(state))\n    switch (action.type) {\n        case \"SET_ALL_TOTAL_EXPENSES\":\n            /* totalSpent over multiple days */\n            var expensePerAccount = {}\n            var expensePerDay = []\n            // for each day\n            for (let idx = 0; idx < action.data.length; idx++) {\n                var total = 0\n                // for each account in each day\n                for (key in action.data[idx]) {\n                    if (!expensePerAccount[key]) {\n                        expensePerAccount[key] = 0\n                    }\n                    expensePerAccount[key] += action.data[idx][key]\n                    total += action.data[idx][key]\n                }\n                expensePerDay.push(total)\n            }\n\n            state_cpy.serverData = action.data\n            state_cpy.expensePerDay = expensePerDay\n            state_cpy.highestSpent = Math.max(...state_cpy.expensePerDay)\n            state_cpy.totalSpent = arrSum(expensePerDay).toFixed(2)\n            state_cpy.expensePerAccount = expensePerAccount\n            state_cpy.dataLoaded = true\n            return state_cpy\n\n        case \"SET_ALL_TOTAL_EXPENSES_CACHE\":\n            /* totalSpent over multiple days */\n\n            var expensePerAccount = {}\n            var expensePerDay = []\n\n            // for each day\n            for (let idx = 0; idx < action.data.length; idx++) {\n                if (!isBarEnabled(action.enabledBars, idx)) {\n                    expensePerDay.push(0)\n                    continue\n                }\n                // for each account in each day\n                var total = 0\n                for (key in action.data[idx]) {\n\n                    if (!expensePerAccount[key]) {\n                        expensePerAccount[key] = 0\n                    }\n                    expensePerAccount[key] += action.data[idx][key]\n                    if (isAccountEnabled(action.enabledAccounts, key)) {\n                        total += action.data[idx][key]\n                    }\n                }\n\n                expensePerDay.push(total)\n            }\n\n            state_cpy.highestSpent = Math.max(...state_cpy.expensePerDay)\n            state_cpy.totalSpent = arrSum(expensePerDay).toFixed(2)\n            state_cpy.expensePerAccount = expensePerAccount\n            return state_cpy\n        case \"CLEAR_TOTAL_EXPENSES_LOADED\":\n            state_cpy.dataLoaded = false\n            return state_cpy\n\n    }\n    return state\n}\n\nexport default BarSummaryReducer"]},"metadata":{},"sourceType":"module"}