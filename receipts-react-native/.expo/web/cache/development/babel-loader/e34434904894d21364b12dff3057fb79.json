{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/login/PhoneNumberInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Input } from 'react-native-elements';\nimport { AsYouType } from 'libphonenumber-js';\nimport { connect } from 'react-redux';\nimport { commonStyles, theme } from \"../common/styles\";\n\nvar PhoneNumberInputs = function PhoneNumberInputs(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      formattedNumber = _useState2[0],\n      setFormattedNumber = _useState2[1];\n\n  useEffect(function () {\n    setFormattedNumber(new AsYouType('US').input(props.number));\n  }, []);\n\n  function onChange(data) {\n    if (data.length < formattedNumber.length && formattedNumber.charAt(formattedNumber.length - 1) == ')') {\n      setFormattedNumber(data);\n      return;\n    }\n\n    if (data.charAt(0) == \"1\" && data.length > 16) {\n      return;\n    }\n\n    if (data.charAt(0) != \"1\" && data.length > 14) {\n      return;\n    }\n\n    setFormattedNumber(new AsYouType('US').input(data));\n  }\n\n  function onBlur() {\n    var absolute_number = formattedNumber.replace(/[^0-9]/g, '');\n\n    if (absolute_number.length == 10 || absolute_number.length == 11) {\n      props.setNumber(absolute_number);\n    } else {\n      props.setNumber(\"\");\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: _objectSpread(_objectSpread({}, commonStyles.inputView), {}, {\n      flexDirection: \"row\",\n      paddingLeft: 15,\n      borderColor: \"red\"\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    style: {\n      marginRight: 10,\n      marginTop: 10,\n      height: 30,\n      width: 20\n    },\n    source: require(\"../../../assets/mobile.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }), React.createElement(TextInput, {\n    style: _objectSpread(_objectSpread({}, commonStyles.inputText), {}, {\n      flex: 1\n    }),\n    placeholder: \"Phone Number\",\n    onChangeText: onChange,\n    value: formattedNumber,\n    autoCorrect: false,\n    autoCapitalize: \"none\",\n    onBlur: onBlur,\n    keyboardType: \"phone-pad\",\n    placeholderTextColor: theme.placeholderText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  input: {\n    width: \"80%\",\n    height: 100\n  }\n});\n\nfunction mapStateToProps(state) {\n  return {\n    number: state.PersonalInformationReducer.number\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setNumber: function setNumber(entered_number) {\n      dispatch({\n        type: 'SET_NUMBER',\n        new_number: entered_number\n      });\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneNumberInputs);","map":{"version":3,"sources":["/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/login/PhoneNumberInput.js"],"names":["React","useState","useEffect","Input","AsYouType","connect","commonStyles","theme","PhoneNumberInputs","props","formattedNumber","setFormattedNumber","input","number","onChange","data","length","charAt","onBlur","absolute_number","replace","setNumber","inputView","flexDirection","paddingLeft","borderColor","marginRight","marginTop","height","width","require","inputText","flex","placeholderText","styles","StyleSheet","create","mapStateToProps","state","PersonalInformationReducer","mapDispatchToProps","dispatch","entered_number","type","new_number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, TextInput, Image } from 'react-native'\nimport { Input } from 'react-native-elements'\nimport { AsYouType } from 'libphonenumber-js'\nimport { connect } from 'react-redux'\nimport { commonStyles, theme } from '../common/styles';\n\n\nconst PhoneNumberInputs = props => {\n\n    const [formattedNumber, setFormattedNumber] = useState('')\n\n    /*\n     * If the user clicked next and then previous,\n     * show them the data that was filled in\n     */\n    useEffect(() => {\n        setFormattedNumber(new AsYouType('US').input(props.number));\n    }, []);\n\n    function onChange(data) {\n        /* \n         * bug inside parsePhoneNumberFromString \n         * Happens when number is (324) and you hit backspace\n         */\n        if (data.length < formattedNumber.length &&\n            formattedNumber.charAt(formattedNumber.length - 1) == ')') {\n            setFormattedNumber(data)\n            return\n        }\n\n        /* \"1 (789) 234-7893\" */\n        if (data.charAt(0) == \"1\" && data.length > 16) {\n            return\n        }\n\n        /* \"(789) 234-7893\" */\n        if (data.charAt(0) != \"1\" && data.length > 14) {\n            return\n        }\n\n        setFormattedNumber(new AsYouType('US').input(data));\n\n    }\n\n    function onBlur() {\n        let absolute_number = formattedNumber.replace(/[^0-9]/g, '');\n        if (absolute_number.length == 10 || absolute_number.length == 11) {\n            props.setNumber(absolute_number)\n        } else {\n            props.setNumber(\"\")\n        }\n    }\n\n    return (\n\n        <>\n            <View style={{\n                ...commonStyles.inputView, flexDirection: \"row\",\n                paddingLeft: 15, borderColor: \"red\"\n            }} >\n\n                <Image style={{ marginRight: 10, marginTop: 10, height: 30, width: 20 }} source={require('../../../assets/mobile.png')} />\n\n                <TextInput\n                    style={{ ...commonStyles.inputText, flex: 1 }}\n                    placeholder=\"Phone Number\"\n                    onChangeText={onChange}\n                    value={formattedNumber}\n                    autoCorrect={false}\n                    autoCapitalize='none'\n                    onBlur={onBlur}\n                    keyboardType=\"phone-pad\"\n                    placeholderTextColor={theme.placeholderText}\n                />\n            </View>\n        </>\n    )\n}\n\nconst styles = StyleSheet.create({\n    input: {\n        width: \"80%\",\n        height: 100\n    },\n});\n\n\n\nfunction mapStateToProps(state) {\n    return {\n        number: state.PersonalInformationReducer.number\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setNumber: (entered_number) => { dispatch({ type: 'SET_NUMBER', new_number: entered_number }) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneNumberInputs)"]},"metadata":{},"sourceType":"module"}