{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/transactions/details/BarDetails.js\";\nimport React, { useEffect } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport GestureRecognizer, { swipeDirections } from 'react-native-swipe-gestures';\nimport { connect } from 'react-redux';\nimport BarData from \"./BarData\";\nimport Accounts from \"./Accounts\";\nimport constants from \"../../common/constants\";\nvar windowHeight = Dimensions.get('window').height;\nvar goHidden = true;\nvar bounceValue = new Animated.Value(0);\nexport function toggleAccountTransaction(notifySubscriber, direction) {\n  var toVal = null;\n\n  if (direction == \"left\") {\n    toVal = 0;\n  } else if (direction == \"right\") {\n    toVal = constants.windowWidth * -1;\n  }\n\n  notifySubscriber();\n  goHidden = !goHidden;\n  Animated.timing(bounceValue, {\n    toValue: toVal,\n    duration: 1000\n  }).start(notifySubscriber);\n}\n\nvar BarDetails = function BarDetails(props) {\n  useEffect(function () {}, []);\n\n  var on_swipe = function on_swipe(gestureName) {\n    var SWIPE_LEFT = swipeDirections.SWIPE_LEFT,\n        SWIPE_RIGHT = swipeDirections.SWIPE_RIGHT;\n\n    switch (gestureName) {\n      case SWIPE_LEFT:\n        toggleAccountTransaction(props.toggleBarDataSwipe, \"right\");\n        return;\n\n      case SWIPE_RIGHT:\n        toggleAccountTransaction(props.toggleBarDataSwipe, \"left\");\n        return;\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: {\n      height: windowHeight - 340\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, React.createElement(GestureRecognizer, {\n    onSwipe: function onSwipe(direction, state) {\n      return on_swipe(direction, state);\n    },\n    config: {\n      velocityThreshold: 0.1,\n      directionalOffsetThreshold: 800\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, React.createElement(Animated.View, {\n    style: [styles.subView, {\n      transform: [{\n        translateX: bounceValue\n      }]\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: {\n      width: constants.windowWidth\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, React.createElement(BarData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }\n  })), React.createElement(View, {\n    style: {\n      width: constants.windowWidth\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, React.createElement(Accounts, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }\n  })))))), React.createElement(View, {\n    style: {\n      height: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  subView: {\n    flexDirection: \"row\"\n  }\n});\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggleBarDataSwipe: function toggleBarDataSwipe() {\n      return dispatch({\n        type: 'TOGGLE_BAR_DATA_SWIPE'\n      });\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BarDetails);","map":{"version":3,"sources":["/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/transactions/details/BarDetails.js"],"names":["React","useEffect","GestureRecognizer","swipeDirections","connect","BarData","Accounts","constants","windowHeight","Dimensions","get","height","goHidden","bounceValue","Animated","Value","toggleAccountTransaction","notifySubscriber","direction","toVal","windowWidth","timing","toValue","duration","start","BarDetails","props","on_swipe","gestureName","SWIPE_LEFT","SWIPE_RIGHT","toggleBarDataSwipe","state","velocityThreshold","directionalOffsetThreshold","styles","subView","transform","translateX","width","StyleSheet","create","flexDirection","mapStateToProps","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Animated, View, StyleSheet, Text, Dimensions } from \"react-native\";\nimport GestureRecognizer, { swipeDirections } from 'react-native-swipe-gestures';\nimport { connect } from 'react-redux';\n\nimport BarData from \"./BarData\";\nimport Accounts from \"./Accounts\";\nimport constants from \"../../common/constants\";\n\nconst windowHeight = Dimensions.get('window').height;\n\nvar goHidden = true;\nconst bounceValue = new Animated.Value(0)\n\nexport function toggleAccountTransaction(notifySubscriber, direction) {\n\n    let toVal = null\n    if (direction == \"left\") {\n        toVal = 0\n    } else if (direction == \"right\") {\n        toVal = constants.windowWidth * -1\n    }\n\n    notifySubscriber()\n\n    goHidden = !goHidden\n    Animated.timing(bounceValue, {\n        toValue: toVal,\n        duration: 1000\n    }).start(notifySubscriber)\n}\n\nconst BarDetails = props => {\n\n    useEffect(() => {\n    }, []);\n\n    const on_swipe = (gestureName) => {\n        const { SWIPE_LEFT, SWIPE_RIGHT } = swipeDirections;\n        switch (gestureName) {\n            case SWIPE_LEFT:\n                toggleAccountTransaction(props.toggleBarDataSwipe, \"right\")\n                return\n            case SWIPE_RIGHT:\n                toggleAccountTransaction(props.toggleBarDataSwipe, \"left\")\n                return\n        }\n    }\n\n    return (\n        <>\n            <View style={{ height: windowHeight - 340 }}>\n                <GestureRecognizer onSwipe={(direction, state) => on_swipe(direction, state)} config={{ velocityThreshold: 0.1, directionalOffsetThreshold: 800 }}>\n                    <Animated.View style={[styles.subView, { transform: [{ translateX: bounceValue }] }]}>\n                        <View style={{ width: constants.windowWidth }}>\n                            <BarData />\n                        </View>\n                        <View style={{ width: constants.windowWidth }}>\n                            <Accounts {...props} />\n                        </View>\n                    </Animated.View>\n                </GestureRecognizer >\n            </View>\n            <View style={{ height: 10 }} />\n        </>\n    )\n}\n\nconst styles = StyleSheet.create({\n    subView: {\n        flexDirection: \"row\",\n    }\n});\n\nfunction mapStateToProps(state) {\n    return {\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleBarDataSwipe: () => dispatch({ type: 'TOGGLE_BAR_DATA_SWIPE' }),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BarDetails)\n"]},"metadata":{},"sourceType":"module"}