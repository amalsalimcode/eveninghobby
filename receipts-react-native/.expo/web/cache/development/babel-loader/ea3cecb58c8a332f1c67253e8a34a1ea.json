{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/transactions/details/Accounts.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { connect } from 'react-redux';\nimport { ScrollView, FlatList } from 'react-native-gesture-handler';\nimport GestureRecognizer, { swipeDirections } from 'react-native-swipe-gestures';\nimport SingleAccount from \"./SingleAccount\";\nimport SingleDataTemplate from \"./SingleDataTemplate\";\nimport { uuidv4 } from \"../../common/constants\";\nimport FadeInView from \"../../common/FadeInView\";\nimport { theme } from \"../../common/styles\";\n\nvar Accounts = function Accounts(props) {\n  useEffect(function () {}, [props.fullDate]);\n\n  var on_swipe = function on_swipe(gestureName) {\n    var SWIPE_LEFT = swipeDirections.SWIPE_LEFT,\n        SWIPE_RIGHT = swipeDirections.SWIPE_RIGHT;\n\n    switch (gestureName) {\n      case SWIPE_LEFT:\n        props.setBarDataSwipe();\n        return;\n\n      case SWIPE_RIGHT:\n        props.setBarDataSwipe();\n        return;\n    }\n  };\n\n  var newAccount = function newAccount() {\n    props.navigation.navigate(\"ManagePeople\");\n  };\n\n  var setPersonDetails = function setPersonDetails(count, data) {\n    switch (count) {\n      case 'pink':\n        data.color = \"#ff427f\";\n        data.avatarFileName = \"avatar-pink\";\n        data.avatarPath = require(\"../../../../assets/avatar-pink.png\");\n        props.setPersonData(data);\n        return;\n\n      case 'green':\n        data.color = \"green\";\n        data.avatarFileName = \"avatar-green\";\n        data.avatarPath = require(\"../../../../assets/avatar-green.png\");\n        props.setPersonData(data);\n        return;\n    }\n  };\n\n  var getAccounts = function getAccounts() {\n    var x = [];\n    var name = \"\";\n    var prevName = \"\";\n    var personCount = 0;\n\n    if (props.data.length) {\n      for (var idx = 0; idx < props.data.length; idx++) {\n        name = props.data[idx].firstName;\n\n        if (name != prevName) {\n          var data = {\n            email: props.data[idx].email,\n            name: name + \" \" + props.data[idx].lastName\n          };\n          setPersonDetails(props.data[idx].avatarId, data);\n          x.push(React.createElement(View, {\n            style: _objectSpread({}, styles.container),\n            key: uuidv4(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 25\n            }\n          }, React.createElement(Image, {\n            style: styles.tinyLogo,\n            source: data.avatarPath,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }\n          }), React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }\n          }, \" \", name, \" \")));\n          personCount += 1;\n        }\n\n        x.push(React.createElement(SingleAccount, {\n          key: uuidv4(),\n          showExpense: true,\n          data: props.data[idx],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }\n        }));\n        prevName = name;\n      }\n    }\n\n    x.push(React.createElement(SingleDataTemplate, {\n      onClick: newAccount,\n      containerStyle: styles.newAccountContainer,\n      enableExpand: false,\n      key: uuidv4(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, \"Click here to manage accounts\")));\n    return x;\n  };\n\n  if (!props.dataLoaded) {\n    console.log(\"data not loaded yet\");\n    return React.createElement(React.Fragment, null, React.createElement(View, {\n      style: {\n        justifyContent: \"center\",\n        alignContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, React.createElement(ActivityIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return React.createElement(ScrollView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, React.createElement(GestureRecognizer, {\n      onSwipe: function onSwipe(direction, state) {\n        return on_swipe(direction, state);\n      },\n      config: {\n        velocityThreshold: 0.3,\n        gestureIsClickThreshold: 100\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, React.createElement(FadeInView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, getAccounts())));\n  }\n};\n\nvar styles = StyleSheet.create({\n  test: {\n    backgroundColor: \"red\"\n  },\n  tinyLogo: {\n    width: 40,\n    height: 40,\n    marginLeft: 15,\n    marginRight: 10\n  },\n  avatar: {},\n  container: {\n    marginTop: 2,\n    marginBottom: 2,\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    alignSelf: \"center\",\n    borderWidth: 0.3,\n    borderRadius: 10,\n    shadowColor: \"black\",\n    width: \"95%\",\n    shadowOpacity: 0.1,\n    shadowRadius: 40,\n    marginBottom: 10,\n    height: 50\n  },\n  newAccountContainer: {\n    alignItems: \"center\",\n    backgroundColor: theme.primary,\n    borderRadius: 10\n  }\n});\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.AccountsReducer.accountInfo,\n    fullDate: state.TransactionsReducer.meta_data.fullDate,\n    dataLoaded: state.AccountsReducer.dataLoaded\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setBarDataSwipe: function setBarDataSwipe() {\n      return dispatch({\n        type: 'SET_BAR_DATA_SWIPE',\n        source: \"accounts\"\n      });\n    },\n    setPersonData: function setPersonData(data) {\n      return dispatch({\n        type: \"SET_PERSON_INFO\",\n        data: data\n      });\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Accounts);","map":{"version":3,"sources":["/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/transactions/details/Accounts.js"],"names":["React","useEffect","connect","ScrollView","FlatList","GestureRecognizer","swipeDirections","SingleAccount","SingleDataTemplate","uuidv4","FadeInView","theme","Accounts","props","fullDate","on_swipe","gestureName","SWIPE_LEFT","SWIPE_RIGHT","setBarDataSwipe","newAccount","navigation","navigate","setPersonDetails","count","data","color","avatarFileName","avatarPath","require","setPersonData","getAccounts","x","name","prevName","personCount","length","idx","firstName","email","lastName","avatarId","push","styles","container","tinyLogo","newAccountContainer","dataLoaded","console","log","justifyContent","alignContent","direction","state","velocityThreshold","gestureIsClickThreshold","StyleSheet","create","test","backgroundColor","width","height","marginLeft","marginRight","avatar","marginTop","marginBottom","alignItems","flexDirection","alignSelf","borderWidth","borderRadius","shadowColor","shadowOpacity","shadowRadius","primary","mapStateToProps","AccountsReducer","accountInfo","TransactionsReducer","meta_data","mapDispatchToProps","dispatch","type","source"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { useEffect } from 'react';\nimport { StyleSheet, Text, View, Image, ActivityIndicator } from 'react-native'\nimport { connect } from 'react-redux';\nimport { ScrollView, FlatList } from 'react-native-gesture-handler';\nimport GestureRecognizer, { swipeDirections } from 'react-native-swipe-gestures';\nimport SingleAccount from './SingleAccount';\nimport SingleDataTemplate from './SingleDataTemplate';\nimport { uuidv4 } from '../../common/constants'\nimport FadeInView from '../../common/FadeInView';\nimport { theme } from '../../common/styles';\n\nconst Accounts = props => {\n\n    useEffect(() => {\n    }, [props.fullDate])\n\n    const on_swipe = (gestureName) => {\n        const { SWIPE_LEFT, SWIPE_RIGHT } = swipeDirections;\n        switch (gestureName) {\n            case SWIPE_LEFT:\n                props.setBarDataSwipe()\n                return\n            case SWIPE_RIGHT:\n                props.setBarDataSwipe()\n                return\n        }\n    }\n\n    const newAccount = () => {\n        props.navigation.navigate(\"ManagePeople\")\n    }\n\n    const setPersonDetails = (count, data) => {\n        switch (count) {\n            case 'pink':\n                data.color = \"#ff427f\"\n                data.avatarFileName = \"avatar-pink\"\n                data.avatarPath = require('../../../../assets/avatar-pink.png')\n                props.setPersonData(data)\n                return\n            case 'green':\n                data.color = \"green\"\n                data.avatarFileName = \"avatar-green\"\n                data.avatarPath = require('../../../../assets/avatar-green.png')\n                props.setPersonData(data)\n                return\n        }\n    }\n\n    const getAccounts = () => {\n\n        let x = []\n        let name = \"\"\n        let prevName = \"\"\n        let personCount = 0\n\n        if (props.data.length) {\n\n            for (let idx = 0; idx < props.data.length; idx++) {\n\n                name = props.data[idx].firstName\n\n                // new person\n                if (name != prevName) {\n                    var data = {email: props.data[idx].email,\n                                name: name + \" \" + props.data[idx].lastName}\n                    setPersonDetails(props.data[idx].avatarId, data)\n                    x.push(\n                        < View style={{ ...styles.container }} key={uuidv4()} >\n                            <Image style={styles.tinyLogo} source={data.avatarPath} />\n                            <Text> {name} </Text>\n                        </View >\n                    )\n                    personCount += 1\n                }\n\n                x.push(\n                    <SingleAccount key={uuidv4()} showExpense={true} data={props.data[idx]} />\n                )\n\n                prevName = name\n            }\n        }\n\n        // Ability to add a new Bank Account\n        x.push(\n            <SingleDataTemplate onClick={newAccount} containerStyle={styles.newAccountContainer} enableExpand={false} key={uuidv4()}>\n                <Text style={{color: \"white\"}}>Click here to manage accounts</Text>\n            </SingleDataTemplate>\n        )\n        return x\n\n    }\n\n    if (!props.dataLoaded) {\n        console.log(\"data not loaded yet\")\n        return (\n            <>\n                <View style={{ justifyContent: \"center\", alignContent: \"center\" }}>\n                    <ActivityIndicator />\n                </View>\n            </>\n        )\n    } else {\n        return (\n            <ScrollView>\n                <GestureRecognizer onSwipe={(direction, state) => on_swipe(direction, state)} config={{ velocityThreshold: 0.3, gestureIsClickThreshold: 100 }}>\n                    <FadeInView>\n                        {getAccounts()}\n                    </FadeInView>\n                </GestureRecognizer>\n            </ScrollView>\n\n        )\n    }\n}\n\nvar styles = StyleSheet.create({\n    test: {\n        backgroundColor: \"red\"\n    },\n    tinyLogo: {\n        width: 40,\n        height: 40,\n        marginLeft: 15,   \n        marginRight: 10\n    },\n    avatar: {\n    },\n    container: {\n        marginTop: 2,\n        marginBottom: 2,\n        alignItems: \"center\",\n        flexDirection: \"row\",\n        alignSelf: \"center\",\n        borderWidth: 0.3,\n        borderRadius: 10,\n        shadowColor: \"black\",\n        width: \"95%\",\n        shadowOpacity: 0.1,\n        shadowRadius: 40,\n        marginBottom: 10,\n        height: 50\n    },\n    newAccountContainer: {\n        alignItems: \"center\",\n        backgroundColor: theme.primary,\n        borderRadius: 10\n\n    }\n});\n\nfunction mapStateToProps(state) {\n    return {\n        data: state.AccountsReducer.accountInfo,\n        fullDate: state.TransactionsReducer.meta_data.fullDate,\n        dataLoaded: state.AccountsReducer.dataLoaded\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setBarDataSwipe: () => dispatch({\n            type: 'SET_BAR_DATA_SWIPE',\n            source: \"accounts\"\n        }),\n\n        setPersonData: (data) => dispatch({ type: \"SET_PERSON_INFO\", data: data })\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Accounts)\n"]},"metadata":{},"sourceType":"module"}