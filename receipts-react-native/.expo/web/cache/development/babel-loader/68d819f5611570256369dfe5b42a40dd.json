{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/transactions/summary/ChangeDate.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { Overlay } from 'react-native-elements';\nimport { theme, commonStyles } from \"../../common/styles\";\nimport SingleDataTemplate from \"../details/SingleDataTemplate\";\nimport { getStartOfWeek } from \"../utils\";\nimport { connect } from 'react-redux';\n\nvar ChangeDate = function ChangeDate(props) {\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      show = _useState4[0],\n      setShow = _useState4[1];\n\n  var d = new Date();\n  var diff = d.getDate() - 365 * 2;\n  var minimumDate = new Date(d.setDate(diff));\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setDate(currentDate);\n\n    if (Platform.OS != 'ios') {\n      applyDateChange();\n    }\n  };\n\n  var applyDateChange = function applyDateChange() {\n    props.setVisible(false);\n    props.setDate(date);\n  };\n\n  var getDatePicker = function getDatePicker() {\n    return React.createElement(DateTimePicker, {\n      testID: \"dateTimePicker\",\n      textColor: \"black\",\n      value: date,\n      mode: \"date\",\n      display: \"spinner\",\n      onChange: onChange,\n      style: {},\n      overlayStyle: {\n        backgroundColor: theme.subtlePrimary\n      },\n      maximumDate: new Date().setDate(365),\n      minimumDate: minimumDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    });\n  };\n\n  if (Platform.OS == 'ios') {\n    return React.createElement(Overlay, {\n      onBackdropPress: function onBackdropPress() {\n        props.setVisible(false);\n      },\n      overlayStyle: commonStyles.overlayStyle,\n      isVisible: props.visible,\n      height: 300,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: {\n        height: 280,\n        justifyContent: \"space-evenly\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, getDatePicker(), React.createElement(SingleDataTemplate, {\n      onClick: function onClick() {\n        applyDateChange();\n      },\n      containerStyle: {\n        alignItems: \"center\",\n        backgroundColor: theme.primary,\n        borderRadius: 40\n      },\n      enableExpand: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }, \"Set Date\"))));\n  } else {\n    return props.visible ? getDatePicker() : React.createElement(React.Fragment, null);\n  }\n};\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setWeek: function setWeek(newDate) {\n      return dispatch({\n        type: \"SET_CUR_WEEK\",\n        newDate: newDate\n      });\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeDate);","map":{"version":3,"sources":["/Users/bismillah/Desktop/eveninghobby/receipts-react-native/src/components/transactions/summary/ChangeDate.js"],"names":["React","useState","DateTimePicker","Overlay","theme","commonStyles","SingleDataTemplate","getStartOfWeek","connect","ChangeDate","props","Date","date","setDate","show","setShow","d","diff","getDate","minimumDate","onChange","event","selectedDate","currentDate","Platform","OS","applyDateChange","setVisible","getDatePicker","backgroundColor","subtlePrimary","overlayStyle","visible","height","justifyContent","alignItems","primary","borderRadius","color","mapStateToProps","state","mapDispatchToProps","dispatch","setWeek","newDate","type"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Button, Platform, Text } from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { Overlay } from 'react-native-elements';\nimport { theme, commonStyles } from '../../common/styles';\nimport SingleDataTemplate from '../details/SingleDataTemplate';\nimport { getStartOfWeek } from '../utils';\nimport { connect } from 'react-redux'\n\n\nconst ChangeDate = props => {\n    const [date, setDate] = useState(new Date());\n    const [show, setShow] = useState(true);\n\n    // we can allow up to two years from now\n    var d = new Date();\n    var diff = d.getDate() - 365 * 2;\n    var minimumDate = new Date(d.setDate(diff));\n\n    const onChange = (event, selectedDate) => {\n        const currentDate = selectedDate || date;\n        setDate(currentDate);\n\n        // android has its own close button which we can't handle,\n        // so when a date is picked, we just set it\n        if (Platform.OS != 'ios') {\n            applyDateChange()\n        }\n    };\n\n    const applyDateChange = () => {\n        props.setVisible(false)\n        props.setDate(date)\n    }\n\n    const getDatePicker = () => {\n        return (\n            <DateTimePicker\n                testID=\"dateTimePicker\"\n                textColor=\"black\"\n                value={date}\n                mode='date'\n                display=\"spinner\"\n                onChange={onChange}\n                style={{}}\n                overlayStyle={{ backgroundColor: theme.subtlePrimary }}\n                maximumDate={new Date().setDate(365)}\n                minimumDate={minimumDate}\n            />\n        )\n    }\n\n    if (Platform.OS == 'ios') {\n        return (\n            <Overlay onBackdropPress={() => { props.setVisible(false) }} overlayStyle={commonStyles.overlayStyle} isVisible={props.visible} height={300}>\n                <View style={{ height: 280, justifyContent: \"space-evenly\" }}>\n                    {getDatePicker()}\n                    <SingleDataTemplate onClick={() => { applyDateChange() }}\n                        containerStyle={{\n                            alignItems: \"center\",\n                            backgroundColor: theme.primary,\n                            borderRadius: 40\n                        }} enableExpand={false}>\n                        <Text style={{ color: \"white\" }}>Set Date</Text>\n                    </SingleDataTemplate>\n                </View>\n            </Overlay>\n        );\n    } else {\n        return(props.visible ? getDatePicker() : <></>)\n    }\n\n};\n\n\nfunction mapStateToProps(state) {\n    return {\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setWeek: (newDate) => dispatch({ type: \"SET_CUR_WEEK\", newDate: newDate })\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeDate)\n"]},"metadata":{},"sourceType":"module"}